'use strict';

// Reservations controller
angular.module('reservations').controller('ReservationInvoiceItemsController', ReservationInvoiceItemsController);

/** @ngInject **/
function ReservationInvoiceItemsController($scope, notify, ReservationsInvoiceItems, CommonService, GuestyShared){
	var self = this;
	var invoiceItemsAggregator = GuestyShared.functions.invoiceItems.sumAmountReducer;
	var invoiceItemStringify = self.invoiceItemStringify = GuestyShared.functions.invoiceItems.stringifyInvoiceItem;

	self.init = init;
	self.updateInvoiceItem = updateInvoiceItem;
	self.deleteInvoiceItem = deleteInvoiceItem;
	self.toggleEditInvoiceMode = toggleEditInvoiceMode;

	/////////////////////

	function init(reservation){
		if(!reservation){
			notify({ message: 'Reservation was not found', classes: 'alert-danger' });
			return
		}

		// Reservation is of Resource class
		reservation.$promise.then(function(response){
			self.reservation = response;
			getInvoiceItems();
			subscribeToRelevantEvents();
		});
	}

	/**
	 * Finds an invoice-item in the invoice-items-list at removes it from the list
	 */
	function removeInvoiceItemFromList(invoiceItem){
		self.items = _.filter(self.items, function(item){
			return invoiceItem !== item;
		});
		self.items.$resolved = true;
	}

	/**
	 * Subscribe to changes on invoice items list (such as create new invoice item)
	 */
	function subscribeToRelevantEvents(){
		$scope.$on('reservation:invoice-items:updated', function(event, reservationId){
			if(self.reservation._id === reservationId){
				getInvoiceItems();
			}
		});
	}

	/**
	 * Load the list of invoice items related to reservation
	 */
	function getInvoiceItems(){
		// TODO: Move to new format. Invoice items exist on reservation object
		ReservationsInvoiceItems.query({
			reservationId: self.reservation._id
		}).$promise.then(function(response){
			response.forEach(function(item){
				item.confirmationCode = self.reservation.confirmationCode;
				item.listing = self.reservation.listing;
			});

			self.items = invoiceItemsAggregator(response);
		});

	}

	/**
	 * Toggling editing state
	 */
	function toggleEditInvoiceMode(invoiceItem){
		invoiceItem.isEditMode = !invoiceItem.isEditMode;

		if(invoiceItem.isEditMode){
			invoiceItem.edit = {
				description: invoiceItem.description,
				amount: invoiceItem.amount
			};
		}else{
			delete invoiceItem.edit;
		}
	}

	/**
	 * Delete invoice item
	 */
	function deleteInvoiceItem(invoiceItem){
		CommonService.confirm('Are you sure you want to delete this invoice item?').then(function(){
			invoiceItem.isDeleteLoading = true;
			invoiceItem.$delete(function(){
				notify({ message: 'Invoice item deleted successfully', classes: 'alert-success' });
				removeInvoiceItemFromList(invoiceItem);
			}, function(){
				delete invoiceItem.isDeleteLoading;
				notify({ message: 'Invoice item could not be deleted', classes: 'alert-danger' });
			});
		});
	}

	/**
	 * Set the invoice item-change at the server and return an readable answer
	 * @param invoiceItem
	 * @returns {*}
	 */
	function updateInvoiceItem(invoiceItem){
		if(!(invoiceItem.edit.amount && invoiceItem.edit.description)){
			return notify({ message: 'please fill all the fields', classes: 'alert-danger' });
		}

		var oldValues = {
			amount: invoiceItem.amount,
			description: invoiceItem.description
		};
		invoiceItem.amount = invoiceItem.edit.amount;
		invoiceItem.description = invoiceItem.edit.description;
		invoiceItem.isUpdateLoading = true;

		invoiceItem.$update({}, function(){
			notify({ message: 'Invoice item updated successfully', classes: 'alert-success' });
		}, function(){
			invoiceItem.isUpdateLoading = false;
			_.extend(invoiceItem, oldValues);
			notify({ message: 'Invoice item could not be updated', classes: 'alert-danger' });
		});
	}
}
