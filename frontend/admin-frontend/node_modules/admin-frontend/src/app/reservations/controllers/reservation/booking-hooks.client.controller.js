'use strict';

// Reservations controller
angular.module('reservations').controller('ReservationHooksBoxController', [
    '$scope',
    'notify',
    'ReservationsHooks',
    'CommonService',
    'ReservationsModalService',
    function($scope, notify, ReservationsHooks, CommonService, ReservationsModalService) {
        /**
         * get list of reservation hooks
         */
        function getReservationHooks() {
            $scope.hooks = ReservationsHooks.query({
                reservationId: $scope.reservation._id
            });
        }

        /**
         * remove reservation hook from hooks array
         * @param hook
         */
        function removeReservationHookFromList(hook) {
            $scope.hooks = _.filter($scope.hooks, function(appointment) {
                return appointment !== hook;
            });
        }

        /**
         * subscribe to changes on reservation hooks list
         */
        function subscribeToRelevantEvents() {
            $scope.$on('reservation:hooks:updated', function(event, reservationId) {
                if($scope.reservation._id === reservationId)
                    getReservationHooks();
            });
        }

        /**
         * initialize the scope
         */
        function init() {
            getReservationHooks();
            subscribeToRelevantEvents();
        }

        // should have a reservation at the scope
        if($scope.reservation) {
            init();
        } else {
            notify({message: 'Reservation was not found', classes: 'alert-danger'});
            return;
        }

        /**
         * open modal for creating new reservation-hook
         */
        $scope.openAddReservationHookModal = function() {
            ReservationsModalService.openCreateReservationHookModal($scope.reservation);
        };

        /**
         * toggling editing state
         */
        $scope.toggleEditHookMode = function(hook) {
            hook.isEditMode = !hook.isEditMode;

            if(hook.isEditMode) {
                hook.editedScheduledTime = new Date(hook.scheduledTime);
            } else {
                delete hook.editedScheduledTime;
            }
        };

        /**
         * update the reservation hook
         * @param hook
         */
        $scope.updateHook = function(hook) {
            var oldScheduledTime = hook.scheduledTime;
            hook.scheduledTime = hook.editedScheduledTime;

            hook.isUpdateLoading = true;

            hook.$update({}, function() {
                notify({message: 'Reservation hook updated successfully', classes: 'alert-success'});
                hook.isUpdateLoading = false;
            }, function() {
                hook.isUpdateLoading = false;
                hook.scheduledTime = oldScheduledTime;
                notify({message: 'Invoice item could not be updated', classes: 'alert-danger'});
            });
        };

        /**
         * delete reservation hook
         * @param hook
         */
        $scope.deleteHook = function(hook) {
            CommonService.confirm().then(function() {
                hook.$delete(function() {
                    notify({message: 'Reservation hook deleted successfully', classes: 'alert-success'});
                    removeReservationHookFromList(hook);
                }, function() {
                    notify({message: 'Reservation hook delete failed', classes: 'alert-danger'});
                });
            });
        };

    }
]);
