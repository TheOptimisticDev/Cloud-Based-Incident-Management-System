'use strict';

// Cleaning Appointment Modal controller for reservation
angular.module('reservations').controller('CleaningAppointmentModalController', [
    '$scope',
    'Reservations',
    'formData',
    '$uibModalInstance',
    'CommonService',
    'ReservationsCleaningAppointments',
    '$rootScope',
    'Accounts',
    function($scope, Reservations, formData, $uibModalInstance, CommonService, ReservationsCleaningAppointments, $rootScope, Accounts) {

        function init() {
            $scope.newAppointment = formData.appointment || new ReservationsCleaningAppointments(formData.options);
            $scope.newAppointment.reservationId = formData.reservation._id;
            $scope.newAppointment.accountId = formData.reservation.accountId;

            $scope.account = Accounts.get({accountId: $scope.newAppointment.accountId, select: 'billing.paymentMethods._id'}, function() {
                $scope.isAccountWithCC = ($scope.account.billing && $scope.account.billing.paymentMethods && $scope.account.billing.paymentMethods.length);
            });
        }

        /**
         * use save or update, depends if the modal is editing an existing appointment of creating a new one
         * @param callback {Function}
         */
        function callSavingMethod(callback) {
            var eventName;
            if(formData.appointment) {
                $scope.newAppointment.$update({}, callback);
                eventName = 'Cleaning Appointment - Update';
            } else {
                $scope.newAppointment.$save({}, callback);
                eventName = 'Cleaning Appointment - Create';
            }

        }

        /**
         *  close modal after saving
         */
        function closeModal() {
            // broadcast if created bew invoice item related to appointment
            if($scope.newAppointment.price) {
                $rootScope.$broadcast('reservation:invoice-items:updated', formData.reservation._id);
            }
            $rootScope.$broadcast('reservation:cleaning-appointments:updated', formData.reservation._id);
            $uibModalInstance.close($scope.newAppointment);
        }

        if(formData.reservation) {
            init();
        } else {
            formData.reservation = Reservations.get({reservationId: formData.reservationId}, function() {
                init();
            });
        }

        $scope.save = function () {
            CommonService.confirm().then(function() {
                $scope.disableBtns = true;
                callSavingMethod(closeModal);
            });
        };

        $scope.shouldDisableSavingWithInvoice = function() {
            return $scope.newAppointment.price && !$scope.isAccountWithCC;
        };

        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
]);
