'use strict';

// Dashboard controller
angular.module('reservations').controller('ReservationReviewController', [
    '$scope',
    'Authentication',
    'gNotify',
    'Reservations',
    'ReservationsReviews',
    'Reviews',
    'Listing',
    function ($scope, Authentication, gNotify, Reservations, ReservationsReviews, Reviews, Listing) {

        function reviewNotExists() {
            gNotify.info('Guest was already reviewed');
            $scope.reviewNotExists = true;
            //if it's only review in actions required - delete this ticket
            if ($scope.ticket.actionsRequired.length === 1 && $scope.ticket.actionsRequired[0].type === 'review') {
                //todo: Analytics.track('Ticket - Deleted', {reason: 'review was already done'});
                if ($scope.ticket){
                    $scope.ticket.$done({expiredTicket:true}, function() {
                        $scope.loadNextTicket();
                    });
                }
            }
        }

        $scope.useReviewTemplate = function (key, template) {
            if (!$scope.review) $scope.review = {};
            $scope.review[key] = template.body;
        };

        function validateMessage(message){
            if (!message) return false;
            if (message.match(/\#\#\#\#.+/)) return false;
            if (message.match(/\{\{.+\}\}/)) return false;
            return true;
        }

        $scope.save = function () {
            if (!validateMessage($scope.review.publicReview || !validateMessage($scope.review.privateReview))){
                notify({
                    message: 'Message contains warnings or placeholders. Not sending!',
                    classes: 'alert-danger'
                });
                return;
            }
            $scope.review.$update({}, function() {
                $scope.sendSuccess = true;
                gNotify.success('Added to queue');

                //add log
                if(!$scope.reservationId) return;
                Reservations.log({ reservationId: $scope.reservationId },{
                    event: 'Guest was reviewed'
                });
            }, function() {
                gNotify.alert('Request failed');
            });
        };

        $scope.init = function() {
            if(!$scope.reservationId) return reviewNotExists();
            // load reviews templates
            Reservations.get({reservationId: $scope.reservationId, fields:'review'},
                function (reservation) {
                    //host already left a review
                    if (reservation.review && reservation.review.hostReview) return reviewNotExists();

                    //else
                    $scope.review = new ReservationsReviews({
                        reservationId: $scope.reservationId,
                        publicReview: '',
                        privateReview: '',
                        ratingCleanliness: 5,
                        ratingCommunication: 5,
                        ratingObservance: 5,
                        wouldRecommend: true
                    });
                    //load templates:
                    Reviews.query({}, function (reviews) {
                        $scope.reviewsTemplates = _.groupBy(reviews, 'category');

                        // assign automatic first review template
                        if ($scope.reviewsTemplates.public_review) $scope.review.publicReview = $scope.reviewsTemplates.public_review[0].body;
                        if ($scope.reviewsTemplates.private_review) $scope.review.privateReview = $scope.reviewsTemplates.private_review[0].body;
                    });
                    //load review guidelines
                    Listing.get({listingId: $scope.reservation.listingId, fields: 'receptionistsService.reviews'}, function(account){
                        $scope.reviewGuidelines = _.get(account, 'receptionistsService.reviews.writeReviewsGuidelines');
                    });
                },
                reviewNotExists);
        };
    }
]);
