'use strict';

angular.module('reservations').controller('CreateReservationHookModalController', Controller);

/** @ngInject **/
function Controller($scope, notify, reservation, CommonService, $uibModalInstance, HooksHelpersService, ReservationsHooks, Accounts, Contact, $rootScope){


	var self = this;
	var hooksConst;

	self.init = init;
	self.save = save;
	self.cancel = cancel;

	///////////////////////

	function init(){
		self.hooksConst = hooksConst = HooksHelpersService.getHooksConstants();

		var accountId = reservation.accountId;

		self.contacts = Contact.query({ accountId: accountId });
		self.reservation = reservation;
		self.accountId = accountId;

		// Merge objects
		self = _.extend(self, hooksConst, {
			hookData: {
				event: hooksConst.events[0],
				when: 0,
				whenAmount: 1,
				whenType: 'Hours',
				action: hooksConst.actions[0],
				target: hooksConst.actions[0].target[0],
				subject: null,
				message: null
			}
		});
	}

	/**
	 * get hood-data and validate if all fields filled properly (also notify the client about the missing fields)
	 * @param hookData
	 * @returns {boolean}
	 */
	function validateDataForSaving(hookData){

		// validate the event type
		if(!hookData.event){
			notify({ message: 'Please choose an event', classes: 'alert-danger' });
			return false;
		}

		// validate when the hook will fire relative to the event
		if(!hookData.event.canScheduleHookBeforeEvent && hookData.when === -1){
			notify({ message: 'Please choose an event\'s timing', classes: 'alert-danger' });
			return false;
		}

		// validate the hook's action
		if(!hookData.action){
			notify({ message: 'Please choose an action', classes: 'alert-danger' });
			return false;
		}

		// validate if the target is valid to the action
		if(hookData.action.target && hookData.action.target.indexOf(hookData.target) === -1){
			notify({ message: 'Please choose hook\'s target', classes: 'alert-danger' });
			return false;
		}

		// check if subject needed and filled.
		if(hookData.action.subjectNeeded && !hookData.subject){
			notify({ message: 'Please enter subject', classes: 'alert-danger' });
			return false;
		}

		// validate the existing of a message
		if(!hookData.message){
			notify({ message: 'Please enter message', classes: 'alert-danger' });
			return false;
		}

		return true;
	}

	/**
	 * generate valid data object for reservationHook
	 * @param hookData
	 * @returns {{cancelIfReservationGetsCanceled: (*|boolean|ReservationHookSchema.cancelIfReservationGetsCanceled), event: *, when: string, action: *, target: *, subject: (*|null|TemplateSchema.subject|$scope.form.subject|mailOptions.subject|data.subject), message: *}}
	 */
	function createDataForSaving(hookData){
		var reqObj = {
			event: hookData.event.value,
			when: hookData.when ? ((hookData.when * hookData.whenAmount) + ' ' + hookData.whenType.toLowerCase()) : 0,
			action: hookData.action.value,
			target: hookData.target,
			subject: hookData.subject,
			message: hookData.message,
			reservationId: self.reservation._id
		};
		var target = hookData.target.toLowerCase();
		var external = {};
		if(target === 'user'){
			external = {
				userId: hookData.contact._id
			}
		}else if(target === 'contact'){
			external = {
				contact: hookData.contact._id
			};
		}

		return _.assign(reqObj, external);

	}


	function save(){
		if(!validateDataForSaving(self.hookData)) return false;
		CommonService.confirm().then(function(){
			var reservationHook = new ReservationsHooks(createDataForSaving(self.hookData));
			debugger
			reservationHook.$save({
				reservationId: self.reservation._id
			}, function(){
				notify({ message: 'Reservation-Hook has been saved successfully', classes: 'alert-success' });
				$rootScope.$broadcast('reservation:hooks:updated', self.reservation._id);
				$uibModalInstance.close();
			}, function(){
				notify({ message: 'Reservation-Hook saving failed', classes: 'alert-danger' });
			});
		});
	}

	function cancel(){
		$uibModalInstance.dismiss('cancel');
	}

}
