/* global moment, _ */
'use strict';

angular.module('core')
    .filter('trustedHtml', function ($sce) {
        return function (str) {
            return $sce.trustAsHtml(str);
        };
    })
    .filter('clearStyleTags', function () {
        return function (str) {
            if(typeof str !== 'string') return '';
            var html;
            if(str.indexOf('<body') !== -1 && str.indexOf('</body>') !== -1) {
                html = str.substr(str.indexOf('<body')).replace('<body', '<div');
                html = html.substr(0, html.indexOf('</body>')) + '</div>';
            } else {
                html = '<div>' + str + '</div>';
            }
            html = angular.element(html);
            html.find('style').remove();
            return html.html();
        };
    })
    .filter('clearStyleBodyTags', function () {
        return function (str) {
            if(typeof str !== 'string') str = str + '';
            if (str.indexOf('<style')===-1) return str;
            var match = str.match(/<style.+?(body\s?\{.+?}).+?<\/style>/);
            if (match && match.length>1){
                str = str.replace(match[1], '');
            }
            return str;
        };
    })
    .filter('openLinksInBlank', function () {
        return function (str) {
            if(typeof str !== 'string') return '';
            var html = angular.element('<div/>').html(str);
            html.find('a').attr('target', '_blank');
            return html.html();
        };
    })
    .filter('convertToHtml', function () {
        return function (str) {
            if(typeof str !== 'string') return '';
            var html = angular.element('<div/>').html(str);
            // discover if content has html tags at all
            if(html.find('*').length) return html.html();

            return html.html().replace(/\n/g, '<br>');
        };
    })
    .filter('currencySign', ['$filter', function($filter){
        return function(amount, symbol, fractionSize){

            var symbolOnlyMode = !symbol && !fractionSize;

            if (symbolOnlyMode) symbol = amount;

            if (symbol === 'USD') symbol = '$';
            else if (symbol === 'EUR') symbol = '€';
            else if (symbol === 'GBP') symbol = '£';
            else if (symbol === 'JPY') symbol = '¥';
            else if (symbol === 'ILS') symbol = '₪';

            if (symbolOnlyMode) return symbol;

            if (_.isUndefined(fractionSize)){
                var n = Math.abs(amount);
                var decimal = n - Math.floor(n);
                if (decimal === 0){
                    fractionSize = 0;
                }
            }

            return $filter('currency')(amount, symbol, fractionSize);
        };
    }

    ])
  .filter('capitalize', function(){
    return function(input, chr){
      if(isNaN(input)) {
        // If the input data is not a number, perform the operations to capitalize the correct letter.
        var chr = chr - 1 || 0;
        var letter = input.charAt(chr).toUpperCase();
        var output = [];

        for (var i = 0; i < input.length; i++) {
          if (i == chr) {
            output.push(letter);
          } else {
            output.push(input[i]);
          }
        }
        return output.join('');

      } else {
        return input;
      }

    };
  })
  .filter('camelCaseToHuman', function(){
    return function(input){
      return isNaN(input) ? _.startCase(input) : input;
    };
  })
;
