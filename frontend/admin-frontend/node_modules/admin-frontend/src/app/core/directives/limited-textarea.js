'use strict';

(function(){
	angular.module('core').directive('limitedTextarea', limitedTextarea);

	function limitedTextarea(){
		/** @ngInject **/
		function controller($scope){
			var self = this;

			var charset7bit = ['@', '£', '$', '¥', 'è', 'é', 'ù', 'ì', 'ò', 'Ç', '\n', 'Ø', 'ø', '\r', 'Å', 'å', 'Δ', '_', 'Φ', 'Γ', 'Λ', 'Ω', 'Π', 'Ψ', 'Σ', 'Θ', 'Ξ', 'Æ', 'æ', 'ß', 'É', ' ', '!', '"', '#', '¤', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '¡', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Ä', 'Ö', 'Ñ', 'Ü', '§', '¿', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'ä', 'ö', 'ñ', 'ü', 'à'];
			var charset7bitext = ['\f', '^', '{', '}', '\\', '[', '~', ']', '|', '€'];

			var variablesRegex = new RegExp(/{{[^{{]+?}}/g);
			var ENCODINGS = self.ENCODING = {
				ASCII: 'ASCII',
				UNICODE: 'UNICODE'
			};

			self.init = init;
			self.displayInputLength = displayInputLength;

			$scope.$watch(function(){
				return self.ngModel;
			}, function(val){
				updateEncodingType();
				updateErrorIndicator();
				if(self.state.variablesMode){
					updateVariablesWarning();
					verifyAllowedVariables();
				}
			});
			$scope.$watch(function(){
				return self.charsLimitAscii;
			}, function(val){
				init(self.formController);
				updateEncodingType();
				updateErrorIndicator();
				if(self.state.variablesMode){
					updateVariablesWarning();
					verifyAllowedVariables();
				}
			});
			$scope.$watch(function(){
				return self.charsLimitUnicode;
			}, function(val){
				init(self.formController);
				updateEncodingType();
				updateErrorIndicator();
				if(self.state.variablesMode){
					updateVariablesWarning();
					verifyAllowedVariables();
				}
			});
			$scope.$watch(function(){
				return self.variablesMode;
			}, function(val){
				init(self.formController);
				updateEncodingType();
				updateErrorIndicator();
				if(self.state.variablesMode){
					updateVariablesWarning();
					verifyAllowedVariables();
				}
			});

			// //////////////////////////

			function init(formController){
				var variablesMode = typeof self.variablesMode === 'undefined' ? false : self.variablesMode;

				self.formController = formController;

				self.allowedVariables = [].concat(self.allowedVariables);
				self.state = {
					containsVariables: false,
					variablesMode: variablesMode,
					variablesError: false,
					limitBy: ENCODINGS.UNICODE,
					charsLimitAscii: self.charsLimitAscii,
					charsLimitUnicode: self.charsLimitUnicode,
					placeholder: self.placeholder || 'Enter text here'
				};
			}

			function getASCIILength(text){
				var counter = 0;
				if(text && text.length !== 0){
					var textAsArray = Array.from(text);
					counter = textAsArray.reduce(function(accu, char){
						if(charset7bit.indexOf(char) > -1){
							return accu + 1;
						}

						// Otherwise...
						return accu + 2;
					}, counter);
				}
				return counter;
			}

			function getUnicodeLength(text){
				return text ? text.length : 0;
			}

			function isGSMAlphabet(text){
				var result = true;
				if(!text){
					result = false;
				}else if(text.length === 0){
					result = true;
				}else{
					var localResult = true;
					var textAsArray = Array.from(text);

					// For each char, make sure it appears in either of the GSM string arrays
					result = textAsArray.reduce(function(accu, char){
						localResult = (charset7bit.indexOf(char) > -1 || charset7bitext.indexOf(char) > -1);
						return accu && localResult;
					}, result);
				}
				return result;
			}

			function verifyAllowedVariables(){
				var allowedVars = self.allowedVariables;
				var text = self.ngModel + '';
				var m = text.match(variablesRegex);
				var hasError = false;
				if(m !== null){
					hasError = m.reduce(function(accu, match){
						if(!allowedVars.includes(match)){
							accu = true;
						}
						return accu;
					}, hasError);
				}

				if(allowedVars.includes('ANY')){
					hasError = false;
				}
				self.state.variablesError = hasError;
				self.formController.$setValidity('wrongVariables', !hasError);
			}

			function updateEncodingType(){
				var text = self.ngModel + ''; // Make sure its string
				if(!isGSMAlphabet(text)){
					// Means we have non-english char, move to Unicode
					self.state.limitBy = ENCODINGS.UNICODE;
					self.state.charsLimit = self.state.charsLimitUnicode;
				}else{
					self.state.limitBy = ENCODINGS.ASCII;
					self.state.charsLimit = self.state.charsLimitAscii;
				}
			}

			function updateErrorIndicator(){
				if(typeof self.ngModel !== 'undefined'){
					var text = self.ngModel;
					var isIllegalAmount = (text.length / self.state.charsLimit) > 1;
					self.illegalAmount = isIllegalAmount;
					if(isIllegalAmount){
						self.formController.$setValidity('length', false);
					}else{
						self.formController.$setValidity('length', true);
					}
				}
			}

			function updateVariablesWarning(){
				var text = self.ngModel;
				self.state.containsVariables = variablesRegex.test(text);
			}

			function displayInputLength(input){
				var inputLimit;
				var toDisplay;
				var inputLength = 0;
				var cleanInput = input ? input + '' : '';
				if(self.state.variablesMode){
					cleanInput = cleanInput.replace(variablesRegex, '');
				}
				switch(self.state.limitBy){
					case (ENCODINGS.ASCII):
						inputLength = getASCIILength(cleanInput);
						inputLimit = self.state.charsLimitAscii;
						break;
					case (ENCODINGS.UNICODE):
					default:
						inputLength = getUnicodeLength(cleanInput);
						inputLimit = self.state.charsLimitUnicode;
						break;
				}

				toDisplay = !inputLimit ? inputLength : inputLength + '/' + inputLimit;
				return toDisplay;
			}
		}

		return {
			restrict: 'E',
			templateUrl: 'app/core/views/directives/limited-textarea.html',
			replace: true,
			scope: {
				ngModel: '=',
				charsLimitAscii: '<?',
				charsLimitUnicode: '<?',
				variablesMode: '<?',
				allowedVariables: '<?',
				rows: '<',
				cols: '<?',
				placeholder: '<',
				disabled: '<',
				readonly: '<',
				required: '<'
			},
			bindToController: true,
			controllerAs: 'ctrl',
			controller: controller
		};
	}
})();
