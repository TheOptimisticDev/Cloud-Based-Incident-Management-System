/* global moment, _, CKEDITOR, $ */
'use strict';

angular.module('core')
    .directive('inlineEditor', ['$timeout', function($timeout) {
        var template = '<div><div class="content" contenteditable="true"></div></div>';
        return {
            restrict: 'E',
            require: 'ngModel',
            scope: {
                ngModel: '='
            },
            link: function(scope, el, attr) {
                var $content,
                    focusOutFlag = false;

                function saveContent() {
                    $timeout(function() {
                        scope.ngModel = $content.html();
                        focusOutFlag = true;
                    });
                }

                $(el).focusout(saveContent);

                scope.$watch('ngModel', function(newVal) {
                    if (focusOutFlag) return (focusOutFlag = false);

                    $(el).html(template);
                    $content = $(el).find('.content').html(scope.ngModel);
                    CKEDITOR.inline($content[0], {
                        allowedContent: true
                    });
                });
            }
        };
    }])
    .directive('ckEditor', function() {
        return {
            restrict: 'C',
            require: '?ngModel',
            link: function($scope, elm, attr, ngModel) {

                var id = elm.attr('id');
                if (!id) {
                    id = Math.random();
                    elm.attr('id', id);
                }

                var ck = CKEDITOR.replace(elm[0], {
                    disableNativeSpellChecker: false,
                    language: 'en'
                });

                ck.on('pasteState', function() {
                    $scope.$apply(function() {
                        ngModel.$setViewValue(ck.getData());
                    });
                });

                var editor = CKEDITOR.instances[id];
                editor.on('paste', function(e) {
                    e.data.dataValue = $('<div />').append(e.data.dataValue).find('code').removeAttr('style').end().html();
                }, editor.element.$);

                ngModel.$render = function(value) {
                    ck.setData(ngModel.$modelValue);
                };
            }
        };
    })
    .directive('gFocusout', function($timeout) {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function(scope, el, attr) {
                $(el).focusout(function() {
                    $timeout(function() {
                        scope.$eval(attr.gFocusout);
                    });
                });
            }
        };
    })
    // auto resize for textarea elements, by their content.
    .directive('gAutoresize', function($timeout, $window) {
        var evt = document.createEvent('Event');
        evt.initEvent('autosize:update', true, false);

        var autosize = $window.autosize || angular.noop;

        return {
            restrict: 'A',
            link: function(scope, el, attrs) {
                autosize(el);
                $timeout(function() {
                    el[0].dispatchEvent(evt);
                });

                if (attrs.ngModel) {
                    scope.$watch(attrs.ngModel, function() {
                        el[0].dispatchEvent(evt);
                    });
                }
            }
        };
    })
    .directive('gDatepicker', function() {
        var template = '<p class="input-group">' +
            '<input type="text" class="{{inputClass}}" uib-datepicker-popup="{{format}}" data-ng-model="ngModel" data-is-open="opened" data-options="dateOptions" data-close-text="{{closeText}}" name="name" />' +
            '<span class="input-group-btn">' +
            '   <button type="button" class="btn btn-default" data-ng-click="open($event)"><i class="glyphicon glyphicon-calendar"></i></button>' +
            '</span>' +
            '</p>';

        return {
            restrict: 'E',
            scope: {
                ngModel: '=',
                name: '=?',
                required: '=?',
                format: '=?',
                dateOptions: '=?',
                closeText: '=?'
            },
            template: template,
            link: function(scope, el, attr) {
                if (scope.required){
                    attr.required = true;
                }
                scope.opened = false;
                scope.format = scope.format || 'dd-MMMM-yyyy';
                scope.dateOptions = scope.dateOptions || {
                    formatYear: 'yy',
                    startingDay: 1
                };
                scope.closeText = scope.closeText || 'Close';

                scope.inputClass = attr.inputClass || 'form-control';


                scope.open = function($event) {
                    $event.preventDefault();
                    $event.stopPropagation();

                    scope.opened = true;
                };
            }
        };
    })
    .directive('gTimePicker', [
        '$document',
        function($document) {
            return {
                restrict: 'EA',
                scope: {
                    ngModel: '=',
                    defaultTime: '='
                },
                require: 'ngModel',
                link: function (scope, element, attr, ngModelCtrl){
                    function getModel(){
                        //if not needed, just use the model value
                        if (!attr.format){
                            return scope.ngModel || scope.defaultTime;
                        }

                        var input = scope.ngModel || scope.defaultTime;
                        if (input.length !== attr.format.length){
                            return moment(input).toDate();
                        } else {
                            return moment(input, attr.format).toDate();
                        }
                    }

                    function getView(){
                        if (!attr.format) {
                            return scope.time;
                        }
                        return moment(scope.time).format(attr.format);
                    }

                    scope.btnClass = attr.btnClass || 'btn-sm';

                    scope.time = getModel();
                    scope.minuteStep = attr.minuteStep || 10;

                    scope.toggle = function(){
                        scope.open = !scope.open;
                    };

                    scope.setDirty = ngModelCtrl.$setDirty;

                    scope.clear = function(){
                        ngModelCtrl.$setViewValue(null);
                        scope.open = false;
                    };

                    //close when clicking outside
                    $document.on('click', function (e) {
                        if (!scope.open) return;
                        if (element !== e.target && !element[0].contains(e.target)) {
                            scope.$apply(function () {
                                scope.open = false;
                                if (ngModelCtrl.$dirty){
                                    ngModelCtrl.$setViewValue(getView());
                                }
                            });
                        }
                    });
                },
                template:
                '<button type="button" class="btn btn-default" data-ng-class="btnClass" data-ng-click="toggle()">' +
                '<span class="caret"></span>' +
                '</button>' +
                '<div data-ng-show="open" class="timepicker-popup">' +
                '<uib-timepicker ng-model="time" minute-step="minuteStep" ng-change="setDirty()"></uib-timepicker>' +
                '<div data-ng-if="ngModel"><button type="button" class="btn btn-default btn-sm btn-block" data-ng-click="clear()">Clear</button></div>'+
                '</div>'
            };
        }
    ])
    .directive('gDatetimepicker', function($timeout) {
        var template = '<div class="btn-group" data-ng-class="{\'open\': opened}" uib-dropdown>' +
            '<button type="button" data-ng-click="opened = !opened" class="btn btn-default dropdown-toggle" uib-dropdown-toggle">' +
            '{{ngModel|date:\'short\'}}' +
            '<span class="caret"></span>' +
            '</button>' +
            '<ul class="dropdown-menu dropdown-menu-right" uib-dropdown-menu>' +
            '   <datetimepicker data-ng-model="ngModel"/>' +
            '</ul>' +
            '</div>';

        return {
            restrict: 'E',
            scope: {
                ngModel: '=',
                format: '=?',
                dateOptions: '=?',
                closeText: '=?'
            },
            template: template,
            link: function(scope, el, attr) {
                scope.opened = false;
                scope.format = scope.format || 'dd-MMMM-yyyy';
                scope.dateOptions = scope.dateOptions || {
                    formatYear: 'yy',
                    startingDay: 1
                };
                // close the picker on model change only if model was changed by the directive's scope
                scope.$watch('ngModel', function(oldVal, newVal, changingScope) {

                    if ((changingScope === scope) && (oldVal !== newVal)) $timeout(function() {
                        $(el).find('.dropdown-toggle').click();
                    });
                });
            }
        };
    })
    .directive('clipboard', ['$window', function($window) {
        var ZeroClipboard = $window.ZeroClipboard;
        ZeroClipboard.config( { swfPath: '/assets/ZeroClipboard.swf' } );
        return {
            restrict: 'A',
            link: function (scope, el, attr){
                $(el).html('<i class="fa fa-clipboard"></i>');
                var client = new ZeroClipboard(el);

                client.on('ready', function(){
                    client.on('aftercopy', function(){
                        var btn = $(el);
                        btn.blur();
                        btn.addClass('btn-success').removeClass('btn-default').html('<i class="fa fa-check"></i>');
                        setTimeout(function(){
                            btn.removeClass('btn-success').addClass('btn-default').html('<i class="fa fa-clipboard"></i>');
                        },3000);
                    });
                });
                client.on('error', function(err) {
                    console.error(err);
                    ZeroClipboard.destroy();
                });
            }
        };
    }])
    .directive('gPhoneNumber', ['$timeout', function($timeout) {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function(scope, el, attr, ngModel) {
                var telInput = el, country;
                var model = attr.ngModel.split('.');

                telInput.intlTelInput({
                    utilsScript: '/assets/js/utils.js',
                    nationalMode: false
                });
                scope.$watch('ngModel.$modelValue', function () {
                    if (ngModel.$modelValue && !/^\+.*$/.test(ngModel.$modelValue)) {
                        var phone = '+' + ngModel.$modelValue;
                        telInput.intlTelInput('setNumber', phone);
                    }
                });

                ngModel.$parsers.unshift(function(value) {
                    if (value) {
                        var valid = telInput.intlTelInput('isValidNumber');
                        ngModel.$setValidity('phone', valid);
                    } else {
                        ngModel.$setValidity('phone', true);
                    }
                    return value;
                });
            }
        };
    }])
    .directive('datePicker', [
        function() {
            return {
                restrict: 'EA',
                scope: {
                    ngModel: '=',
                    options: '=?'
                },
                require: 'ngModel',
                link: function (scope, element, attr, ngModelCtrl){
                    scope.btnClass = attr.btnClass || 'btn-sm';
                    scope.showValue = attr.showValue;
                    scope.toggle = function(){
                        scope.open = !scope.open;
                    };
                    scope.emptyText = attr.emptyText;
                    scope.onChange = function(){
                        ngModelCtrl.$setViewValue(scope.ngModel);
                    };
                },
                template:
                '<button type="button" class="btn btn-default" data-ng-class="ngModel?btnClass:[btnClass,\'empty\']" data-ng-click="toggle()" uib-datepicker-popup data-ng-model="ngModel" data-ng-change="onChange()" datepicker-options="options" is-open="open">' +
                '<span data-ng-if="!ngModel" data-ng-bind="emptyText"></span>' +
                '<span data-ng-if="ngModel && showValue" data-ng-bind="ngModel|date:\'shortDate\'"></span>' +
                '<span class="caret"></span>' +
                '</button>'
            };
        }
    ]);


angular.module('core').directive('numberPicker', [
    function(){
        return {
            restrict: 'EA',
            scope: {
                ngModel: '=',
                min: '=?',
                max: '=?'
            },
            require: 'ngModel',
            link: function(scope, element, attr, ngModelCtrl){
                //build numbers range
                scope.arr = _.range(scope.min || 1, scope.max ? scope.max+1 : 11);

                //pluralize extra string
                if (attr.extra && attr.extra.substr(-1)==='s'){
                    scope.extra = attr.extra.substr(0, attr.extra.length-1);
                }

                //on edit
                scope.updateField = function(num){
                    scope.ngModel = num;
                    ngModelCtrl.$setViewValue(scope.ngModel);
                };
            },
            template:
            '<div class="btn-group" uib-dropdown><button type="button" class="btn btn-default btn-sm dropdown-toggle" uib-dropdown-toggle><span data-ng-bind="ngModel"></span> <span data-ng-if="extra" data-ng-bind="number===1?extra:extra+\'s\'"></span> <span class="caret"></span></button>' +
            '<ul class="dropdown-menu" role="menu"><li data-ng-repeat="number in arr"><a href="" data-ng-click="updateField(number)"><span data-ng-bind="number"></span> <span data-ng-if="extra" data-ng-bind="number===1?extra:extra+\'s\'"></span></a></li></ul>' +
            '</div>'
        }
    }
]);

angular.module('core').directive('selectPicker', [
    function(){
        return {
            restrict: 'EA',
            scope: {
                ngModel: '=',
                options: '=',
                placeholder: '@?'
            },
            require: 'ngModel',
            link: function(scope, element, attr, ngModelCtrl){
                scope.updateField = function(value){
                    scope.selected = value;
                    scope.ngModel = _.isObject(value) ? value.value : value;
                    ngModelCtrl.$setViewValue(scope.ngModel);
                };

                scope.$watch('ngModel', function () {
                    if (scope.ngModel){
                        //basic
                        scope.selected = scope.ngModel;

                        //is dictionary mode
                        if (scope.options && scope.options.length && _.isObject(scope.options[0])){
                            scope.selected = _.find(scope.options, {value: scope.ngModel});
                        }
                    }
                });
            },
            template:
            '<div class="btn-group" uib-dropdown><button type="button" class="btn btn-default btn-sm dropdown-toggle" uib-dropdown-toggle><span data-ng-bind="selected.text?selected.text:selected"></span><span data-ng-if="!selected" class="text-muted" data-ng-bind="placeholder"></span> <span class="caret"></span></button>' +
            '<ul class="dropdown-menu" role="menu"><li data-ng-repeat="option in options"><a href="" data-ng-click="updateField(option)" data-ng-bind="option.text?option.text:option"></a></li></ul>' +
            '</div>'
        }
    }
]);
