'use strict';

angular.module('accounts').controller('paymentPlanCtrl', paymentPlanCtrl);

/** @ngInject **/
function paymentPlanCtrl(Enums, PlanTypeNameHumanizer, $stateParams, Accounts, Listing, SweetAlert){
	var self = this;

	// Expose enum
	var PLAN_TYPES = self.PLAN_TYPES = Enums.PLAN_TYPES;
	var PLAN_NAMES = self.PLAN_NAMES = Enums.PLAN_NAMES;
	self.PLAN_NAMES = Enums.PLAN_NAMES;
	self.inputPlaceholder = self.specialPlaceholder || 'Amount';

	if(self.onChange){
		self.onChange = self.onChange(); // Unwrap function from parent
	}
	self.notifyParent = notifyParent;
	self.addNewItem = addNewItem;
	self.humanizePlanTypeEnum = humanizePlanTypeEnum;
	self.humanizePlanNameEnum = humanizePlanNameEnum;
	self.updateFormValidity = updateFormValidity;
	self.deleteItem = deleteItem;
	self.shouldDisplayDollar = shouldDisplayDollar;
	self.shouldDisplayPercent = shouldDisplayPercent;
	self.injectPlanTypeOptions = injectPlanTypeOptions;
	self.syncPrices = syncPrices;

	// //////////////////////////////////////

	function syncPrices(){
		self.isSyncing = true;
		var resource = self.isListingSettings ? Listing : Accounts;
		var id = self.isListingSettings ? $stateParams.listingId : $stateParams.accountId;
		resource.updateReservationCommission({ _id: id }).$promise.then(function(res){
			SweetAlert.swal('Update was successful', 'Changes will take place soon', 'success');
		}, function(err){
			SweetAlert.swal('Woops!\n Something went wrong', 'Try again later or contact our support', 'error');
		}).then(function(){
			self.isSyncing = false;
		});
	}

	function isValidFormItem(item){
		function isVerifiedNumberRangeRestrictions(){
			var result = item.value >= 0 && item.value !== '';
			result = result && item.value <= 20000;
			var commissions = [PLAN_TYPES.TRANSACTION_COMMISSION, PLAN_TYPES.RESERVATION_COMMISSION];
			if(commissions.indexOf(item.planType) > -1){
				result = result && item.value <= 100;
			}
			return result;
		}

		var isValid = !!item && !!item.name;
		if(item.value){
			isValid = isValid && !isNaN(item.value);
		}
		if(item.name && item.name === PLAN_NAMES.SOFTWARE){
			// software must have value of R+;
			// If we're on listings' settings, we can allow Software to be 0
			isValid = isValid && item.value >= 0;
			if(!self.isListingSettings){
				isValid = isValid && item.value !== '';
			}
			if(item.value){ // If we have numeral value in field
				isValid = isValid && isVerifiedNumberRangeRestrictions();
			}
		}else if(item.isLocked){
			// If its locked (and not software) - can be empty
			if(item.value && (item.value + '').length > 0){
				isValid = isValid && isVerifiedNumberRangeRestrictions();
			}
		}else{
			// Else must be <= 0 && if commission type - below 100
			isValid = isValid && isVerifiedNumberRangeRestrictions();
		}
		return isValid;
	}

	function updateFormValidity(formController){
		performFullFormCheck(formController);
	}

	function deleteItem(item, formController){
		self.planData.splice(self.planData.indexOf(item), 1);
		formController.$setDirty();
		performFullFormCheck(formController);
	}

	function performFullFormCheck(formController){
		var safePlanDataArr = self.planData || [];
		var isFormValid = safePlanDataArr.reduce(function(result, curr){
			return result && isValidFormItem(curr);
		}, true);

		formController.$setValidity('Reason', isFormValid);
	}

	function humanizePlanTypeEnum(str){
		return PlanTypeNameHumanizer.humanize('PLAN', str);
	}

	function humanizePlanNameEnum(str){
		return PlanTypeNameHumanizer.humanize('NAME', str);
	}

	function notifyParent(){
		var state = self.state;
		self.onChange(state);
	}

	function addNewItem(formController){
		var newItem = {
			name: '',
			planType: Enums.PLAN_TYPES.RESERVATION_COMMISSION,
			value: '',
			isLocked: false
		};
		self.planData.push(newItem);
		updateFormValidity(formController);
	}

	function shouldDisplayPercent(TYPE){
		var options = [
			Enums.PLAN_TYPES.TRANSACTION_COMMISSION,
			Enums.PLAN_TYPES.RESERVATION_COMMISSION
		];
		return options.indexOf(TYPE) > -1;
	}

	function shouldDisplayDollar(TYPE){
		var options = [
			Enums.PLAN_TYPES.ACCOUNT_MONTHLY,
			Enums.PLAN_TYPES.LISTING_MONTHLY
		];
		return options.indexOf(TYPE) > -1;
	}

	function injectPlanTypeOptions(item){
		var validOptions = [];
		var itemName = item.name;
		var PLAN_NAMES = Enums.PLAN_NAMES;
		switch(itemName){
			case (PLAN_NAMES.SOFTWARE):
			case (PLAN_NAMES.RECEPTIONISTS_SERVICE):
			case (PLAN_NAMES.RENTALS_UNITED):
			case (PLAN_NAMES.AIRBNB):
				validOptions.push(PLAN_TYPES.RESERVATION_COMMISSION, PLAN_TYPES.LISTING_MONTHLY);
				break;
			case (PLAN_NAMES.WEBSITE):
			case (PLAN_NAMES.API_ACCESS):
				validOptions.push(PLAN_TYPES.ACCOUNT_MONTHLY, PLAN_TYPES.LISTING_MONTHLY);
				break;
			default:
				validOptions.push(PLAN_TYPES.ACCOUNT_MONTHLY, PLAN_TYPES.LISTING_MONTHLY, PLAN_TYPES.RESERVATION_COMMISSION);
				break;
		}
		if(self.isListingSettings){
			// On listing they can't be "monthly"
			validOptions = validOptions.filter(function(TYPE){
				return TYPE !== PLAN_TYPES.ACCOUNT_MONTHLY;
			});
		}
		return validOptions;
	}
}
