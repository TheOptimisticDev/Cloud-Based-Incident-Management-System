'use strict';

// Listing controller
angular.module('listings').controller('ListingSmartRulesController', [
	'$stateParams',
	'$location',
	'$document',
	'SweetAlert',
	'Listing',
	function($stateParams, $location, $document, SweetAlert, Listing){

		var self = this;
		self.selectedListings = [];

		self.init = function(){
			//load the listing
			self.listing = Listing.get({
				listingId: $stateParams.listingId,
				fields: 'pms.automation.calendarSmartRules accountId'
			}, function(){

				if(_.get(self.listing, 'pms.automation.calendarSmartRules.blockListings', []).length){
					//then load the blocked listings
					self.loadListings(null, _.get(self.listing, 'pms.automation.calendarSmartRules.blockListings')).then(function(){

						//set those as selected
						self.selectedListings = self.listings;

					});
				}

			});
		};

		var sendUpdateListingRequest = function(data, cb){
			return Listing.save({ listingId: self.listing._id }, data, function(response){
				SweetAlert.swal({
					title: 'Success',
					type: 'success'
				});

				if(cb && typeof cb === 'function'){
					cb();
				}

			}, function(err){
				SweetAlert.swal({
					title: 'Error',
					text: err,
					type: 'error'
				});

				if(cb && typeof cb === 'function'){
					cb();
				}

			}).$promise;
		};

		self.save = function(frm){
			var blockedSiblings = _.map(self.selectedListings, '_id');

			sendUpdateListingRequest({
				pms: { automation: { calendarSmartRules: { blockListings: blockedSiblings } } }
			}).then(function(){
				frm.$setPristine();
			}, function(){
				frm.$setDirty();
			});
		};

		self.loadListings = function(q, ids){
			return Listing.query({
				accountId: self.listing.accountId,
				fields: '_id title address.full picture.thumbnail nickname',
				q: q,
				ids: ids,
				nids: ids ? null : _.map(self.selectedListings, '_id'),
				limit: ids ? 100 : 10,
				sort: 'nickname title'
			}, function(listings){
				self.listings = listings.results;
			}).$promise;
		};

		self.toggleCalendarRulesFeature = function(){
			if(_.get(self.listing, 'pms.automation.calendarSmartRules.active')){
				//enabling
				//show message
				SweetAlert.swal({
					title: 'Enable calendar rules?',
					type: 'info',
					showCancelButton: true,
					confirmButtonColor: '#43AC6A',
					confirmButtonText: 'Enable',
					cancelButtonText: 'Cancel',
					closeOnConfirm: true,
					closeOnCancel: true
				}, function(isConfirm){
					if(isConfirm){
						//disabling
						SweetAlert.swal({
							title: 'Enabling calendar rules...',
							showConfirmButton: false
						});
						sendUpdateListingRequest({ pms: { automation: { calendarSmartRules: { active: true } } } }, setSmartRules(true));
					}else{
						// aborted. set the gestures back to normal
						setSmartRules(false);

					}
				});

			}else{
				//disabling
				SweetAlert.swal({
					title: 'Disable calendar rules?',
					type: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#DD6B55',
					confirmButtonText: 'Disable',
					cancelButtonText: 'Cancel',
					closeOnConfirm: true,
					closeOnCancel: true
				}, function(isConfirm){
					if(isConfirm){
						//disabling
						SweetAlert.swal({
							title: 'Disabling calendar rules...',
							showConfirmButton: false
						});
						sendUpdateListingRequest({ pms: { automation: { calendarSmartRules: { active: false } } } }, setSmartRules(false));
					}else{
						// aborted. set the gestures back to normal
						setSmartRules(true);

					}
				});
			}
		};

		function setSmartRules(setting){
			if(!(setting === true || setting === false)) return;

			try{
				self.listing.pms.automation.calendarSmartRules.active = setting;
			}
			catch(err){
				console.log(err);
			}
		}

	}
]);
