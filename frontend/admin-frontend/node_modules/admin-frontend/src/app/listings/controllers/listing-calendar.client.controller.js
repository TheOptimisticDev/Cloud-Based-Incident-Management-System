'use strict';

// Listing calendar controller
angular.module('listings').controller('ListingCalendarController', [
    '$stateParams',
    'ListingCalendar',
    'Reservations',
    '$filter',
    '$uibModal',
    '$compile',
    '$scope',
    function($stateParams, ListingCalendar, Reservation, $filter, $uibModal, $compile, $scope) {

        var self = this;
        var today = moment().startOf('day');

        function getReservationEventForUiCalendar(reservation) {
            if (!reservation) return;
            var cssClasses = ['reservation', reservation.status];
            return {
                title: _.get(reservation, 'guest.firstName'),
                image: _.get(reservation, 'guest.picture.thumbnail'),
                url: '/reservations/' + reservation._id,
                start: moment(reservation.checkInDateLocalized),
                end: moment(reservation.checkOutDateLocalized),
                className: cssClasses,
                reservation:   reservation,
                allDay: true
            };
        }

        function getBackgroundEventsForUiCalendar(event) {
            var date = moment(event.date);
            var cssClasses = [event.status + '-day'];
            if (date.isBefore(today)){
                cssClasses.push('in-past');
            }
            return {
                start: date,
                end: event.end ? moment(event.end, 'YYYY-MM-DD').add(1, 'day') : date,
                title: event.status === 'available' ? $filter('currencySign')(event.price, event.currency, 0) : event.note,
                className: cssClasses,
                event: event,
                allDay: true
            };
        }

        function loadDates(start, end, timezone, renderCalendar){
            if (start.date() !== 1) start = start.add(1, 'month').startOf('month');
            start = moment(start).format('YYYY-MM-DD');
            end = moment(start).endOf('month').format('YYYY-MM-DD');

            ListingCalendar.retrieve({
                listingId: $stateParams.listingId || _.get($scope, 'listing._id'),
                from: start,
                to: end,
                fields: 'date status note price currency'
            }, function(dates) {

                //combine events
                //add another element, so the last element will also count
                dates.push({});

                //go day by day,
                var events = [],
                    prevEvent = dates.shift() || {};

                _.each(dates, function(date){
                    //is it the an extension of the prev event
                    if ((date.reservationId && date.reservationId === prevEvent.reservationId) || (date.status === 'unavailable' && prevEvent.status === 'unavailable' && date.note === prevEvent.note)){
                        //extend the end of the prevDate
                        prevEvent.end = date.date;
                    } else {
                        events.push(prevEvent);
                        prevEvent = date;
                    }
                });

                //reject reservation events, because we load them separately
                events = _.reject(events, {'status': 'booked'});
                events = _.reject(events, {'status': 'reserved'});
                events = _.reject(events, {'status': 'awaiting_payment'});

                //map and cb
                renderCalendar(_.map(events, getBackgroundEventsForUiCalendar));
            }, function () {
                renderCalendar();
            });
        }

        function loadReservations(start, end, timezone, renderCalendar){
            if (start.date() !== 1) start = start.add(1, 'month').startOf('month');
            start = moment(start);
            end = moment(start).endOf('month');

            Reservation.queryApi2({
                fields: 'status checkInDateLocalized checkOutDateLocalized guest.firstName guest.pictures.thumbnail',
                filters: JSON.stringify([
                    {field:'checkIn', operator:'$lt', value: end.toISOString()},
                    {field:'checkOut', operator:'$gt', value: start.toISOString()},
                    {field:'status', operator:'$in', value: ['confirmed', 'reserved', 'awaiting_payment']},
                    {field:'listingId', operator:'$eq', value: $stateParams.listingId || _.get($scope, 'listing._id')}
                ])
            }, function(reservations){
                var events = _.map(reservations.results, getReservationEventForUiCalendar);
                renderCalendar(events);
            }, function(){
                renderCalendar();
            });
        }

        function editEvent(calendarEvent, jsEvent, fullCalendarView){
            //editing is not permitted on past events
            if (moment(calendarEvent.end || calendarEvent.start).isBefore(today)){
                return;
            }

            //editing is not permitted on reservation events
            if (calendarEvent.reservation) {
                return;
            }

            //open the edit modal
            $uibModal.open({
                templateUrl: 'app/listings/views/modals/calendar.edit.html',
                controller: 'ListingCalendarEditCtrl as edit',
                size: 'md',
                resolve: {
                    event: function(){
                        return calendarEvent.event;
                    },
                    listingIds: function(){
                        return $stateParams.listingId || _.get($scope, 'listing._id');
                    }
                }
            }).result.then(function(result){
                if (result && result.status === 'success'){
                    fullCalendarView.calendar.refetchEvents();
                }
            });
        }

        self.init = function(){
            self.fullCalendar = {
                schedulerLicenseKey: '0242383282-fcs-1456162589',
                height: window.innerHeight - 270,
                editable: false,
                header:{
                    left: 'title',
                    center: '',
                    right: 'today prev,next'
                },
                eventClick: editEvent,
                //dayClick: editEvent,
                eventMouseover: function(event, e){
                    if (event.reservation){
                        $(e.target).parents('.fc-body').find('.fc-event.reservation[reservationId="' + event.reservation._id + '"]').addClass('hover');
                    }
                },
                eventMouseout: function(event, e){
                    if (event.reservation){
                        $(e.target).parents('.fc-body').find('.fc-event.reservation[reservationId="' + event.reservation._id + '"]').removeClass('hover');
                    }
                },
                eventRender: function(event, element) {
                    if (event.image){
                        element.find('.fc-content').before('<img src="'+ event.image +'" />');
                    }
                    if (event.reservation) {
                        element.attr('reservationId', event.reservation._id);
                        element.attr({
                            'reservation-popup': event.reservation._id
                        });
                        $compile(element)($scope);
                    }
                }
            };

            self.calendarData = [loadDates, loadReservations];
        };

    }
]);
