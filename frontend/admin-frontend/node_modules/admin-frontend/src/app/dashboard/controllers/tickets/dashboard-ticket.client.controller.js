'use strict';

// Dashboard controller
angular.module('dashboard').controller('DashboardTicketController', [
    '$scope',
    '$rootScope',
    '$interval',
    '$window',
    'gNotify',
    'InboxTicket',
    'Reservations',
    'SweetAlert',
    'dataFallback',
    '$uibModal',
    'User',
    'Accounts',
    'Listing',
    'Contact',
    'ConversationsHelpers',
    function($scope, $rootScope, $interval, $window, gNotify, InboxTicket, Reservations, SweetAlert, dataFallback, $uibModal, User, Accounts, Listing, Contact, ConversationsHelpers) {

        var intervalForUpdateTabs,
            activeTab,
            viewedTabs = [];

        var titles = {
            review: 'Review',
            todo: 'Task',
            notification: 'Notification'
        };

        var types = {
            review: 'review',
            todo: 'todo',
            notification: 'notification',
            conversation: 'conversation',
            reservation: 'reservation'
        };

        var positions = {
            user: 0,
            conversation: 1,
            notification: 2,
            review: 3,
            todo: 4
        };

        $scope.users = [];
        $scope.contacts = [];

        function getTitle(openItem) {
            if (titles[openItem.type]) {
                return titles[openItem.type];
            }

            if (openItem.type === types.conversation) {
            	// If the conversation has a title show it, otherwise mark as conversation
                return openItem.title || types.conversation;
            }
        }

        function isRequired(openItem){
            return _.find($scope.ticket.actionsRequired, function(action){
                return action.type === openItem.type && action.id === openItem.id;
            });
        }

        function getPosition(openItem){
            var isConversationWithUser = openItem.type === types.conversation && openItem.title === 'User';
            if (isConversationWithUser) return positions.user;
            return positions[openItem.type];
        }

        function isTabActive(openItem){
            if (!activeTab) return false;
            return activeTab.id === openItem.id && activeTab.type === openItem.type;
        }

        function isTabViewed(openItem){
            if (!viewedTabs.length) return false;
            return !!_.find(viewedTabs, function(tab){
                return tab.id === openItem.id && tab.type === openItem.type;
            });
        }

        function getOpenTabsObject(openItems) {
            return _.map(openItems, function(openItem) {
                return _.extend(openItem, {
                    position: getPosition(openItem),
                    title: getTitle(openItem),
                    required: isRequired(openItem),
                    active: isTabActive(openItem),
                    checked: isTabViewed(openItem),
                    hasLoaded: isTabViewed(openItem)
                });
            });
        }

        function findUsers(){
            var parentObj = $scope.reservation || $scope.ticket;
            if (!parentObj){
                console.log('err? no parent object', $scope);
            } else if (!parentObj.accountId){
                console.log('err? parent object has no accountId', parentObj);
            }
            async.parallel({
                account: function(done){
                    if (!parentObj.accountId) return done();
                    Accounts.get({accountId:parentObj.accountId, fields:'receptionistsService.contactPersonUserId'}, function(account) {
                        done(null, account);
                    });
                },
                listing: function(done){
                    if (!parentObj.listingId) return done();
                    Listing.get({listingId:parentObj.listingId, fields:'receptionistsService.contactPersonUserId'}, function(listing) {
                        done(null, listing);
                    });
                },
                users: function(done){
                    if (!parentObj.accountId) return done();
                    User.query({accountId:parentObj.accountId, fields:'fullName firstName'}, function(response) {
                        $scope.users = response.results;
                        done(null, $scope.users);
                    });
                },
                contacts: function(done){
                    if (!parentObj.accountId) return done();
                    Contact.query({accountId:parentObj.accountId, fields:'fullName firstName'}, function(response) {
                        $scope.contacts = response.results;
                        done(null, $scope.contacts);
                    });
                }
            }, function(err, results){
                console.log(results);
                var contactPersonId = _.get(results.listing, 'receptionistsService.contactPersonUserId');
                if (!contactPersonId){
					contactPersonId = _.get(results.account, 'receptionistsService.contactPersonUserId');
                }
                if (contactPersonId){
                    var user = _.find(results.users, {'_id': contactPersonId});
                    if (user){
                        $scope.contactPersonUser = user;

                        // Filters out the contactPerson from the users list to prevent duplication
                        $scope.users =($scope.users || []).filter(function(currentUser){
                        	return !(user._id === currentUser._id)
						});
                    }
                }
            });
        }

        function deactivateTabs() {
            _.each($scope.openTabs, function(tab) {
                tab.active = false;
            });
        }

        function firstRequiredTab(){
            var requiredTab = _.find($scope.openTabs, function(openItem){
                return openItem.required;
            });

            if (requiredTab) return requiredTab;
            return $scope.openTabs[0];
        }

        function cancelTimers(){
            $interval.cancel(intervalForUpdateTabs);
        }

        function updateTabFromTicket(ticket, callback) {
            _.assign($scope.ticket, ticket);
            if (!$scope.reservation || !$scope.reservation._id){
                if(typeof callback === 'function') callback();
                return;
            }
            //todo: check if new actions were added
            callback();
        }

        function updateTabs(callback){
            function afterGetTicket(ticket) {
                updateTabFromTicket(ticket, callback);
            }

            dataFallback($scope, 'ticket', function(id, ticket) {
                if(ticket) {
                    afterGetTicket(ticket);
                } else {
                    InboxTicket.get({ticketId: id}, afterGetTicket);
                }
            });
        }

        function activateReservationSync(){
            if ($scope.reservation) {
                intervalForUpdateTabs = $interval(updateTabs, 30*1000);
                $scope.$on('$destroy', cancelTimers);
            }
        }

        function removeDuplicateContact(openTabs){
            return _.filter(openTabs, function(tab){
                return !_.find($scope.openLocalTabs, function(localTab){
                    return !!localTab.contactId && !!tab.contactId && localTab.contactId === tab.contactId;
                });
            });
        }

        function loadTransactionTabs(openTabs){
            openTabs = removeDuplicateContact(openTabs);
            openTabs = getOpenTabsObject(openTabs);
            openTabs = _.sortBy(openTabs, function(openItem){ return openItem.position; });
            return openTabs;
        }

        function loadRelatedReservationTabs(){
            Reservations.related({reservationId: $scope.reservation._id}, function(related){
                _.each(related, function(tab){
                    if (_.find($scope.openTabs, {'id': tab.id})) return;

                    // Add additional fields to the action item so that the tab is rendered properly
                    var parsedTab = getOpenTabsObject([].concat(tab));
					$scope.openTabs = $scope.openTabs.concat(parsedTab);
                });
            });
        }

        //gets the tab title and returns the first name
        function getFirstNameFromTabTitle(tabTitle){

            var fullName = tabTitle.split(' ');
            var firstName;
            if (fullName.length == 3){ //e.g user: jhon smith
                firstName = fullName[1];
            }
            else if (fullName.length == 2){//e.g jane smith
                firstName = fullName[0];
            }
            else {//e.g jhon || user: mr jhony smith junior
                firstName = tabTitle; // as is default
            }
            return firstName;
        }

        $scope.selectReservation = function(reservation){
            if (!reservation) return;
            $scope.reservation = reservation;
            // this event cause refresh ticket inbox SR's
            $scope.$emit('ticketConversationSelected');
            loadRelatedReservationTabs();
        };

        function findAndLoadReservations(cb){
            if (!$scope.ticket || !$scope.ticket.reservationIds) return cb();

			var reservationIds = $scope.ticket.reservationIds;
            if (!reservationIds || !reservationIds.length) return cb();

			Reservations.queryApi2({
				fields: 'createdAt status checkIn checkOut confirmationCode accountId listingId guestId integration._id guest.fullName',
				filters: JSON.stringify([
					{field:'accountId', operator:'$eq', value: $scope.ticket.accountId},
					{field:'_id', operator:'$in', value: $scope.ticket.reservationIds},
				]),
				sort: 'checkIn',
				limit: 50
			}, function(reservations){
				$scope.reservations = reservations.results || [];

				if (reservations && $scope.reservations.length){
					$scope.selectReservation(_.last($scope.reservations));
				}
				cb();
			}, function(err){
				cb();
			});
        }

        $scope.openTab = function(tab){
            if(!tab){
                return;
            }
            var firstName = tab.contactFirstName || getFirstNameFromTabTitle(tab.title);
            //is used by
            ConversationsHelpers.setConversationContactName(firstName);

            deactivateTabs();
            tab.hasLoaded = true;
            tab.active = true;
            tab.checked = true;
            $scope.checkTicketDoneStatus();

            activeTab = tab;
            viewedTabs.push(tab);
        };

        $scope.checkTicketDoneStatus = function (){
            var uncheckedItems = _.filter($scope.openTabs, function(openItem){
                return openItem.required && !openItem.checked;
            });

            $scope.ticket.hasConversations = !!_.find($scope.openTabs, function(item) {
                return item.type === 'conversation';
            });
            $scope.ticket.hasUnfinishedTabs = uncheckedItems.length;
        };

        $scope.createNewConversation = function(contact) {
            $scope.openLocalTabs.push({
                type: 'conversation',
                id: contact._id,
                contactId: contact._id,
                title: contact.fullName,
                contactFirstName: contact.firstName,
                isNewConversation: true,
                active: false
            });

            // remove contact from the list
            $scope.contacts = _.reject($scope.contacts, {'_id': contact._id});
        };

        $scope.createNewConversationWithUser = function(user) {
            $scope.openLocalTabs.push({
                type: 'conversation',
                title: 'User: ' + user.fullName,
                isNewConversation: true,
                contactFirstName: user.firstName,
                active: false,
                userId: user._id
            });
            $scope.users = _.reject($scope.users, {'_id': user._id});
        };

        $scope.openReservationLogModal = function(limitToItemId) {
            if (!$scope.reservation || !$scope.reservation._id) return;
            var reservationId = $scope.reservation._id;
            $uibModal.open({
                windowClass: 'reservation-log-modal',
                templateUrl: 'app/reservations/views/reservation/reservation-log-box.client.view.html',
                size: 'lg',
                controller: function($scope) {
                    $scope.reservationId = reservationId;
                    $scope.limitToItemId = limitToItemId;
                }
            });
        };

        $scope.$on('tabs.done', function() {
            updateTabs(function() {
                $scope.checkTicketDoneStatus();
                if ($scope.ticket.hasUnfinishedTabs) {
                    return SweetAlert.swal('Cannot close the ticket before you check all the tabs');
                }
                $rootScope.$broadcast('ticket.ok');
            });
        });

        // If Qa-Review fails for some reason
        $scope.$on('qareview.error', function() {
            return SweetAlert.swal('Error with QA review submit function');
        });

        $scope.openLocalTabs = [];
        $scope.openTabs = [];

        activateReservationSync();

        _.each($scope.ticket.actionsRequired, function(action){
		$scope.openTabs.push({
 			type: action.type,
                	id: action.id,	
                	title: action.title
            	});
        });
        $scope.openTabs = loadTransactionTabs($scope.openTabs);
        $scope.openTab(firstRequiredTab());

        $scope.reservations = [];
		findAndLoadReservations(function(){
			if($scope.reservation){
				loadRelatedReservationTabs();
			}
			findUsers();
		});
	}
]);
