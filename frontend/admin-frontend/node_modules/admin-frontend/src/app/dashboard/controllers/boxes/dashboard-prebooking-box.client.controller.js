'use strict';

// Dashboard controller
angular.module('dashboard').controller('DashboardPreBookingBoxController', ['$scope',
    'Accounts',
    'Listing',
    'Reservations',
    'gNotify',
    function($scope, Accounts, Listing, Reservations, gNotify) {

        var self = this;

        self.init = function(){
            //this module requires reservation
            if (!$scope.reservation || !$scope.reservation._id) return;

            //exit if nothing has changed
            if (self.reservationId === $scope.reservation._id) return;

            //clear
            self.items = {};
            self.$resolved = false;

            //load in parallel
            async.parallel({
                //the user
                account: function(cb){
                    Accounts.getApi2({accountId: $scope.reservation.accountId, fields: 'receptionistsService.screening'}, function(account){
                        cb(null, _.get(account, 'receptionistsService.screening.checklist'));
                    }, cb);
                },
                //the listing
                listing: function(cb){
                    self.listing = Listing.get({listingId: $scope.reservation.listingId, fields: 'receptionistsService.screening'}, function(listing){
                        if (_.get(listing, 'receptionistsService.screening.goOverChecklist') !== false){
                            cb(null, _.get(listing, 'receptionistsService.screening.checklist'));
                        } else {
                            cb(null, 'abort');
                        }
                    }, cb);
                },
                confirmed: function(cb){
                    self.reservation = Reservations.get({reservationId: $scope.reservation._id, fields: 'confirmedPreBookings receptionistsService'}, function(reservation){
                        cb(null, reservation.confirmedPreBookings);
                    }, cb);
                }
            }, function(err, results){
                if (err) return gNotify.error('Error with loading screening checklist.');
                if (results.listing === 'abort'){
                    self.noNeed = true;
                } else {
                    self.items = {
                        account: results.account,
                        listing: results.listing
                    };
                    self.confirmed = results.confirmed || [];
                    self.checklistUpdated();
                }

                //save to prevent loading if nothing has changed
                self.reservationId = $scope.reservation._id;
                self.$resolved = true;
            });

        };

        $scope.$watch('reservation._id', self.init);

        self.checklistUpdated = function(){
            var accountItems = _.map(self.items.account, 'item');
            var listingItems = _.map(self.items.listing, 'item');
            if (_.reject(accountItems, self.isItemChecked).length){
                $scope.reservation.preBookingChecklistCompleted = false;
            } else if (_.reject(listingItems, self.isItemChecked).length) {
                $scope.reservation.preBookingChecklistCompleted = false;
            } else {
                $scope.reservation.preBookingChecklistCompleted = true;
            }
        };

        self.isItemChecked = function(item){
            if (!self.confirmed) return false;
            return self.confirmed.indexOf(item) !== -1;
        };

        self.toggleItem = function(item, $index){
            if (!self.confirmed) self.confirmed = [];

            self.$loading = $index;
            Reservations.updatePreBooking({reservationId: $scope.reservation._id}, {item: item}, function(reservation){
                self.confirmed = reservation.confirmedPreBookings;
                self.$loading = false;
                self.checklistUpdated();
            }, function(){
                self.$loading = false;
                gNotify.error('Failed');
            });
        };

        self.setReservationValue = function(field, value, alsoSave){
            console.log(field, value, alsoSave);
            _.set(self.reservation, field, value);
            if (alsoSave){
                Reservations.update({reservationId: self.reservation._id}, _.pick(self.reservation, field.split('.')[0]), function() {
                }, function(){
                    gNotify.error('Failed');
                });
            }
        };

    }
]);
