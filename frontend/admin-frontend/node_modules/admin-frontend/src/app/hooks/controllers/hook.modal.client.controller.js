'use strict';

// Hooks controller
angular.module('hooks').controller('HookModalController', [
    '$scope',
    '$uibModalInstance',
    'Hooks',
    'Templates',
    'Accounts',
    'Contact',
    'CommonService',
    'notify',
    'formData',
    'ReservationsFilters',
    'HooksHelpersService',
    'Listing',
    'User',
    function($scope, $uibModalInstance, Hooks, Templates, Accounts, Contact, CommonService, notify, formData, ReservationsFilters, HooksHelpersService, Listing, User) {

        var self = this;
        self.selectedListings = [];

        var hooksConstants = HooksHelpersService.getHooksConstants();

        function queryParams() {
            var obj = {};

            if (formData.account) {
                obj.accountId = formData.account._id;
            }

            if (formData.listing) {
                obj.listingIds = formData.listing._id;
                if(!obj.accountId) obj.accountId = formData.listing.accountId;
            }
            return obj;
        }

        function getHooksFiltersForResource(hook) {
            var event = _.find($scope.events, function(event) {
                return hook.event === event.name;
            });
            return _.map(hook.filters, function(filter) {
                if (!filter) return;
                var data = _.pick(filter, filter.optionParams ? filter.optionParams.fields : filter.fields);
                data.operator = filter.operator;
                data.field = filter.field;
                if($scope.filters[data.field].type === 'date') {
                    data.context = event.filtersContext;
                }
                if(typeof $scope.filters[data.field].passThrough !== 'undefined') {
                    data.passThrough = $scope.filters[data.field].passThrough;
                }

                if(filter.optionParams) {
                    data.operator = filter.optionParams.operator;
                    data.optionDisplayName = filter.optionParams.displayName;

                    if(filter.optionParams.subject) {
                        data.subject = filter.optionParams.subject;
                    }
                    if(filter.optionParams.context) {
                        data.context = filter.optionParams.context;
                    }
                }

                return data;
            });
        }

        $scope.castOrSetDefaultSpecificFilter = function (filter) {
            if (!filter) return;
            _.each(filter.fields || (filter.optionParams ? filter.optionParams.fields : []), function (fieldName, index) {
                var fieldType = filter.optionParams ? filter.optionParams.fieldType : filter.type;
                if(typeof filter[fieldName] === 'undefined' && filter.optionParams && filter.optionParams.defaultValues) {
                    filter[fieldName] = filter.optionParams.defaultValues[index];
                }

                if (fieldType === 'date') {
                    filter[fieldName] = filter[fieldName] ? new Date(filter[fieldName]) : new Date();
                } else if (fieldType === 'time'){
                    //if not valid format, use default
                    if (!(filter[fieldName]+'').match(/[0-2][0-9]:[0-5][0-9]/)){
                        filter[fieldName] = filter.optionParams.defaultValues[index];
                    }
                } else if (fieldType === 'number') {
                    filter[fieldName] = +filter[fieldName];
                } else if (fieldType === 'boolean') {
                    filter[fieldName] = (filter[fieldName] === true || filter[fieldName] === 'true');
                }
            });
        };

        function castOrSetDefaultValuesToFiltersFields(hook) {
            _.each(hook.filters, function (filter) {
                $scope.castOrSetDefaultSpecificFilter(filter);
            });
        }

        function getHooksFiltersForView(hook) {
            return _.map(hook.filters, function(filter) {
                if (!filter) return;
                filter.fields = $scope.filters[filter.field].fields;
                filter.type = $scope.filters[filter.field].type;
                filter.optionParams = _.find($scope.filtersOptions[$scope.filters[filter.field].type], {'displayName': filter.optionDisplayName});
                filter.meta = $scope.filters[filter.field];
                return filter;
            });
        }

        // find template by id for data template data extraction in html
        var findTemplate = function(id) {
            return _.find($scope.templates, function(template) {
                return template._id === id;
            });
        };

        function getNewHookAction() {
            return _.find($scope.actions, function(action) {
                return $scope.new_hook.action === action.name;
            });
        }

        // TODO: replace this shit with better Schema
        function parseWhen(when){
            if(!when) return {when:0};

            if(when[0] !== '-') when = '+' + when;
            var str = when.slice(1, when.length);
            return {
            	when: when[0].replace('-', '-1').replace('+', '1'),
            	when_number: +str.split(' ')[0],
            	when_type: str.split(' ')[1]
            };
        }

        Contact.query({accountId: queryParams().accountId, fields: 'fullName'}, function(response){
            $scope.contacts = response.results;
        });
        User.query({accountId: queryParams().accountId, fields: 'fullName'}, function(response){
            $scope.users = response.results;
        });


        var default_new_hook = {
            when: 0,
            event: 'reservation confirmed',
            action: 'send platform message',
            target: 'guest',
            when_number: 0,
            when_type: 'days',
            atSpecificTime: false,
            specificTime: moment().hour(14).minutes(0).toDate(),
            cancelIfReservationGetsCanceled: true,
            filters: []
        };

        $scope.actions = [
            {
                name: 'send platform message',
                human: 'Send platform message',
                target: ['guest'],
                message: 'template'
            }, {
                name: 'send email',
                human: 'Send Email',
                target: ['guest', 'user', 'contact'],
                message: 'template'
            }, {
                name: 'send sms',
                human: 'Send SMS',
                target: ['guest', 'user', 'contact'],
                message: 'template'
            }, {
                name: 'receptionists dashboard',
                human: 'Open a ticket for the receptionists team',
                target: null,
                message: 'plain'
            }, {
                name: 'post bookings dashboard',
                human: 'Open a ticket for the post booking team',
                target: null,
                message: 'plain'
            }, {
                name: 'internal notes',
                human: 'Internal notes',
                target: null,
                message: 'plain'
            }
        ];

        $scope.events = [
            {
                name: 'reservation confirmed',
                filtersContext: 'confirmedAt'
            },
            {
                name: 'check in',
                canPast: true,
                filtersContext: 'confirmedAt'
            },
            {
                name: 'check out',
                canPast: true,
                filtersContext: 'confirmedAt'
            },
            {
                name: 'reservation canceled',
                filtersContext: 'canceledAt'
            },
            {
                name: 'reservation altered',
                filtersContext: 'alteredAt'
            }
        ];

        $scope.filtersOptions = hooksConstants.filtersOptions;

        $scope.filters = ReservationsFilters;
        //load custom fields as filters
        Accounts.get({accountId: queryParams().accountId, fields:'customFields'}, function(account){
            _.each(account.customFields || [], function(customField){
                $scope.filters['customFields.'+customField._id] = {
                    field: 'customFields.' + customField._id,
                    displayName: (customField.object==='listing'? 'Listing\'s ' :'') + customField.key,
                    type: customField.type,
                    fields: ['value'],
                    operator: '$eq',
                    sort: 200
                };
                if (['contact', 'user'].indexOf(customField.type)!==-1){
                    $scope.filters['customFields.'+customField._id].fields.push('optionDisplayName');
                    $scope.filters['customFields.'+customField._id].valueType = 'populate';
                }
            });
        });

        $scope.templates = formData.templates;
        $scope.new_hook = default_new_hook;

        if (formData.hook) { // edit mode
            var new_hook = _.clone(formData.hook);

            if (new_hook.templateId) {
                new_hook.templateId = new_hook.templateId._id;
            }

            new_hook = _.extend(new_hook, parseWhen(new_hook.when));
            new_hook.filters = getHooksFiltersForView(new_hook);
            castOrSetDefaultValuesToFiltersFields(new_hook);

            if (new_hook.specificTime){
                new_hook.atSpecificTime = true;
                new_hook.specificTime = moment(new_hook.specificTime, 'HH:mm').toDate();
            }

            $scope.new_hook = new_hook;
        }

        $scope.addMode = !formData.hook;
        $scope.editMode = !!formData.hook;

        $scope.checkGroupsOfFilterOptions = function(filter, currentFilterOptions) {
            filter.optionsGroupsCount = _.uniq(_.map(currentFilterOptions, 'optionGroup')).length;
        };

        $scope.loadListings = function(q, ids){
            return Listing.query({
                accountId: formData.hook ? formData.hook.accountId || formData.hook.accountId : formData.listing ? formData.listing.accountId : formData.account ? formData.account._id : $scope.account ? $scope.account._id : $scope.listing ? $scope.listing.accountId : null,
                fields:'_id title address.full picture.thumbnail nickname',
                q: q,
                ids: ids,
                limit:ids ? 100 : 10
            }, function(listings){
                $scope.listings = listings.results;
            });
        };

        function getListingsAndSetSelectedListings(listingIds) {
            self.selectedListings = [];
            if (!_.isArray(listingIds)) listingIds = [listingIds];
            $scope.loadListings(null, listingIds).$promise.then(function(){
                if (listingIds){
                    _.each(listingIds, function(id){
                        var listing = _.find($scope.listings, {'_id': id});
                        if (listing){
                            self.selectedListings.push(listing);
                        }
                    });
                }
            });
        }

        getListingsAndSetSelectedListings(formData.hook ? formData.hook.listingIds : formData.listing ? [formData.listing._id] : $scope.listing ? [$scope.listingId] : null);

        // Create new Hook
        $scope.create = function() {
            // Create new Hook object
            var newHook = _.extend($scope.new_hook, queryParams());
            if($scope.new_hook.when_number)
                newHook.when = ($scope.new_hook.when * $scope.new_hook.when_number) + ' ' + $scope.new_hook.when_type;
            else
                newHook.when = 0;
            var hook = new Hooks(newHook);
            if(typeof hook.templateId !== 'undefined' && !hook.templateId) {
                delete hook.templateId;
            }
            hook.filters = getHooksFiltersForResource(hook);
            if (hook.atSpecificTime) {
                hook.specificTime = moment(hook.specificTime).format('HH:mm');
            } else {
                hook.specificTime = null;
            }
            hook.listingIds = _.map(self.selectedListings, '_id');
            hook.$save({}, function() {
                $uibModalInstance.close();
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        // Update Hook
        $scope.update = function(hook) {
            hook = new Hooks(hook);
            if(hook.when_number)
                hook.when = (hook.when * hook.when_number) + ' ' + hook.when_type;
            else
                hook.when = 0;

            if(typeof hook.templateId !== 'undefined' && !hook.templateId) {
                delete hook.templateId;
            }
            hook.filters = getHooksFiltersForResource(hook);
            if (hook.filters && !hook.filters.length) hook.filters = null;

            castOrSetDefaultValuesToFiltersFields(new_hook);
            if ($scope.specificTime) {
                hook.specificTime = moment(hook.specificTime).format('HH:mm');
            } else {
                hook.specificTime = null;
            }
            hook.listingIds = _.map(self.selectedListings, '_id');
            hook.$update({}, function() {
                $uibModalInstance.close();
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        // add Hook filter
        $scope.addFilter = function(filterOption) {
            var filter = {
                field: filterOption.field,
                type: filterOption.type,
                operator: filterOption.operator,
                fields: filterOption.fields,
                meta: filterOption
            };
            if(filterOption.operator) filter.operator = filterOption.operator;
            $scope.castOrSetDefaultSpecificFilter(filter);
            $scope.new_hook.filters.push(filter);
        };

        // remove Hook filter
        $scope.removeFilter = function(filter) {
            $scope.new_hook.filters = _.reject($scope.new_hook.filters, filter);
        };

        // get template body first 500 chars
	    $scope.templateBody = function(id){
	        if (!id) return '';
	        return findTemplate(id).body;
	    };

	    // check if template has attachment
	    $scope.templateHasAttachment = function(id){
	        if (!id) return '';
	        return findTemplate(id).has_attachment;
	    };

        $scope.fnNewHook = {
            eventCanPast: function() {
                var event = _.find($scope.events, function(event) {
                    return $scope.new_hook.event === event.name;
                });
                return event && event.canPast;
            },
            checkFields: function() {
                var action = getNewHookAction();
                if (!action.target) {
                    delete $scope.new_hook.target;
                } else if (_.indexOf(action.target, $scope.new_hook.target) === -1) {
                    delete $scope.new_hook.target;
                }
                if ($scope.new_hook.target !== 'user' && $scope.new_hook.userId) {
                    delete $scope.new_hook.userId;
                }
                if ($scope.new_hook.target !== 'contact' && $scope.new_hook.contact) {
                    delete $scope.new_hook.contact;
                }
            },
            actionCanTarget: function(target) {
                var action = getNewHookAction();
                if (!target)
                    return action && action.target && action.target.length;
                else
                    return action && action.target && _.indexOf(action.target, target) !== -1;
            },
            actionMessageType: function(type) {
                var action = getNewHookAction();
                if (!type)
                    return action && action.message;
                else
                    return action && action.message && action.message === type;
            }
        };
    }
]);
