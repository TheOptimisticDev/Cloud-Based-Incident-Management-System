'use strict';

angular.module('integrations').controller('AirbnbIntegrationController', [
    '$scope',
    'SweetAlert',
    'Accounts',
    'Integrations',
    'notify',
    function($scope, SweetAlert, Accounts, Integrations, notify) {

        var self = this;

        // check if integration sync is in progress
        function checkIfIntegrationSyncInProgress(callback) {
            Integrations.get({integrationId: $scope.integration._id, fields: 'pendingTasks'}, function(integration) {
                callback(integration.pendingTasks && integration.pendingTasks.length);
            });
        }

        // set $scope.isIntegrationSyncing to 'TRUE' until syncing is done.
        function triggerWhenIntegrationSynced() {
            self.isIntegrationSyncing = true;
            setTimeout(function() {
                checkIfIntegrationSyncInProgress(function(isInProgress) {
                    if(isInProgress) {
                        triggerWhenIntegrationSynced();
                    } else {
                        delete self.isIntegrationSyncing;
                    }
                });
            }, 3000);
        }

        self.isForwardEmail = function(email, list) {
            return list && list.indexOf(email) >= 0;
        };

        self.addOrRemoveForwardEmails = function(e, form, email, list) {
            var checkbox = e.target;
            if (checkbox.checked) {
                list.push(email);
            } else {
                list.splice(list.indexOf(email), 1);
            }

            form.$setDirty();
        };

        // reset our integration with platform
        self.resetPassword = function(){

					// Invoking the parent saveIntegration method to PUT the data on server.
					// Server will recognize the change and inject the update into the queue by itself
            $scope.saveIntegration($scope.integration);
        };

        self.verifyIncomingEmailAvailability = function(frmInput, integration){
            Integrations.query({incomingEmail: frmInput.$viewValue, fields:'_id', limit:1}, function(integrations){
                if (integrations && integrations.length && integrations[0]._id !== integration._id){
                    frmInput.$setValidity('taken', false);
                } else {
                    frmInput.$setValidity('taken', true);
                }
            });
        };

        self.init = function(integration){
            if (!integration.forwardEmails || !integration.forwardEmails.asGuest){
                integration.forwardEmails.asGuest = $scope.account.email;
            }
        };

        self.syncNow = function(){
            Integrations.syncListings({integrationId: $scope.integration._id}, {}, function(){
                notify({
                    message:'Added to queue successfully',
                    classes: 'alert-success'
                });
            }, function(){
                notify({
                    message:'Task failed',
                    classes: 'alert-danger'
                });
            });
        };

        self.showWarningForDeletingIgnoredListing = function(ignoredListingArray,listing_number) {
          swal({
              title: "Are you sure you want to remove" + ' ' + listing_number + ' ' + 'from the list?',
              text: "After removing this listing from the ignored list the sync will be triggered immediately.",
              type: "warning",
              showCancelButton: true,
              confirmButtonClass: "btn-danger",
              confirmButtonText: "Yes, sync it!",
              closeOnConfirm: true
            },
            function(){
              var index = ignoredListingArray.indexOf(listing_number);
              // removing ignored listing from the list
              if (index > -1) {
                ignoredListingArray.splice(index,1);
              }
              //saving updated array to the mongo
              $scope.integration.$save(function(){
                // if success - trigger sync
                  self.syncNow();
              }, function(response){
                var extraMessage = response.data ? response.data.message : '';

                notify({
                  message:'Sync failed',
                  classes: 'alert-danger'
                });
              });
            });
        }
        /*self.isInProxyMode = function(frmIntegration){
                    //must be clean
            return frmIntegration.$pristine &&
                    //with a username (otherwise waiting for connection)
                frmIntegration.username.$modelValue &&
                    //username must be different than incoming email.
                (frmIntegration.incomingEmail.$modelValue !== frmIntegration.username.$modelValue);
        };*/
    }
]);
