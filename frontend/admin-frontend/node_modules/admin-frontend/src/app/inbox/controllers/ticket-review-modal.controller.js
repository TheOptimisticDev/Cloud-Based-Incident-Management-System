'use strict';

// Inbox controller
angular.module('inbox').controller('ticketReviewModalController', [
	'$scope',
	'$uibModalInstance',
	'$state',
	'Authentication',
	'InboxTicket',
	'ticket',
	'ticketReviewCategories',
	function($scope, $uibModalInstance, $state, Authentication, InboxTicket, ticket, ticketReviewCategories) {
		var self = this;

		self.initGoodTicket = initGoodTicket;
		self.initBadTicket = initBadTicket;
		self.toReadable = toReadable;
		self.categorySelected = categorySelected;
		self.subCategorySelected = subCategorySelected;
		self.ticketRequirementsNotMet = ticketRequirementsNotMet;
		self.cancel = cancel;
		self.submit = submit;


		function initGoodTicket() {
			self.review = {
				comments: '',
				severity: 0
			};
		}

		function initBadTicket() {
			self.review = {
				comments: ''
			};

			self.selected = {};
			self.ticketCategories = Object.keys(ticketReviewCategories);
		}

		function cancel() {
			$uibModalInstance.dismiss();
		}

		function submit() {
			var reviewObject = {
				by: Authentication.getEmployee().username,
				at: new Date(),
				category: self.review.category,
				subCategory: _.get(self.review, 'subcategory.issue'),
				score: self.review.severity,
				comments:  self.review.comments
			};

			// If this ticket has already been rated, add this to the array of ratings, otherwise create new review array
			ticket.qaReview = (ticket.qaReview || []).concat(reviewObject);
			ticket.$update(ticket.qaReview, function successfulUpdateCallback(){
				swal({
						title: 'Thank you!',
						text: 'Making us better every day!',
						type: 'success',
						confirmButtonColor: '#DD6B55',
						confirmButtonText: 'Back to the inbox',
						closeOnConfirm: true
					},
					function confirmButtonClicked(){ // Take user back to tickets menu after reviewing a ticket
						$uibModalInstance.close();
					});
			},
				function errorUpdateCallback(){
					swal('Error', 'An error occurred, ticket review not saved', 'error');
				}
			);
		}

		function categorySelected() {
			self.subcategories = ticketReviewCategories[self.selected.category];
			self.review.category = self.selected.category;
			self.selected.subcategory = self.review.subcategory = '';
		}

		function subCategorySelected() {
			// Ih8this
			self.review.subcategory = JSON.parse(self.selected.subcategory);
			self.review.severity = self.review.subcategory.severity || 3;
		}

		function toReadable(categoryEnum) {
			if(!!categoryEnum) {
				return categoryEnum.split('_').join(' ').toLowerCase();
			}else{
				return '';
			}
		}

		function ticketRequirementsNotMet() {
			return !self.review.comments || !self.review.category || !self.review.subcategory;
		}
	}
]);
