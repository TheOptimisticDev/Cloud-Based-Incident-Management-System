'use strict';

// Inbox controller
angular.module('inbox').controller('InboxController', [
	'$scope',
	'$rootScope',
	'$state',
	'$stateParams',
	'Authentication',
	'Inbox',
	'Employees',
	'InboxTicket',
	'gNotify',
	'InboxModals',
	'SweetAlert',
	'$timeout',
	'Events',
	'AppConfig',
	'viewMode',
	function($scope, $rootScope, $state, $stateParams, Authentication, Inbox, Employees, InboxTicket, gNotify, InboxModals, SweetAlert, $timeout, Events, AppConfig, viewMode){

		$scope.ticket = null;
		$scope.disableStartButton = false;
		$scope.employee = null;
		$scope.init = init;

		$scope.isActive = isActive;

		////////////////////////

		function isActive(){
			if($stateParams.ticketId) return 'ok';
			if(!$rootScope.employee || !$rootScope.employee.roles) return false;
			if($rootScope.employee.roles.indexOf('receptionist') === -1) return false;
			if(!$rootScope.employee.isInShift) return 'checkin';
			if($rootScope.employee.pausedInboxAt || !$rootScope.employee.isInInbox) return 'start';
			return 'ok';
		}

		function getTicket(){
			InboxTicket.get({
				ticketId: $stateParams.ticketId
			}, function(ticket){
				if($stateParams.ticketId){
					$scope.ticket = ticket;
					Events.emit('ticket.viewed', ticket);
					return;
				}
				if(!ticket._id && ticket.message === 'finish'){
					$scope.noTickets = true;
					setTimeout(getTicket, 15000);
				}else{
					$scope.ticket = ticket;
					$scope.noTickets = false;
					Events.emit('ticket.viewed', ticket);
				}
			});
		}

		function getAllActiveEmployees(){
			$scope.activeEmployees = Employees.listOfEmployeesInInbox();
		}

		function init(){
			$scope.ticket = null;
			$scope.disableStartButton = false;
			$scope.viewMode = viewMode;

			getAllActiveEmployees();
			if(!$rootScope.employee || !$rootScope.employee.$resolved){
				$rootScope.employee.$promise.then(function(){
					if($scope.isActive() === 'ok'){
						getTicket();
					}
				});
			}else if($scope.isActive() === 'ok'){
				getTicket();
			}
			$scope.gifUrl = AppConfig.receptionists.gifs[_.random(AppConfig.receptionists.gifs.length) - 1];
		}

		$scope.startInbox = function(){
			Inbox.start({}, function(){
				$rootScope.employee.isInInbox = true;
				$rootScope.employee.pausedInboxAt = null;
				Events.emit('inbox.started');
				getTicket();
			});
		};

		$scope.pauseInbox = function(){
			Inbox.pause(function(){
				$scope.ticket = null;
				$rootScope.employee.isInInbox = false;
				$rootScope.employee.pausedInboxAt = new Date();
				Events.emit('inbox.paused');
			});
		};

		$scope.save = function(ticket, cb){
			var clone = _.cloneDeep(ticket);
			ticket.$update(function(){
				_.defaultsDeep(ticket, clone);

				// Callback parameter
				if(cb && typeof cb === 'function'){
					cb();
				}

			}, function(){
				gNotify.alert('failed to update ticket');
			});
		};

		$scope.doneTicket = function(ticket){
			var ticketData = ticket.toJSON();
			ticket.$done(function(){
				var waitTime = moment.duration(moment() - moment((ticketData.snooze && ticketData.snooze.willReturnAt) ? ticketData.snooze.willReturnAt : ticketData.createdAt));
				var handleTime = moment.duration(moment() - moment(ticketData.assignedAt));
				var data = _.extend({
					account: ticketData.accountName,
					listing: ticketData.listingTitle,
					guest: ticketData.guestName,
					completedBy: Authentication.getEmployee().username,
					completedAt: new Date(),
					waitTimeHours: waitTime.asHours().toFixed(1),
					waitTimeMinutes: waitTime.asMinutes().toFixed(1),
					passed: ticketData.passed ? ticketData.passed.length : 0,
					category: _.map(ticketData.actionsRequired, 'type'),
					handleTimeSeconds: handleTime.asSeconds().toFixed(1),
					handleTimeMinutes: handleTime.asMinutes().toFixed(1)
				}, ticketData);

				Events.emit('ticket.done', data);

				var err;
				if(data.handleTimeMinutes <= 0){
					err = 'handle time is less or equal to zero';
				}else if(data.handleTimeMinutes <= 0.5){
					err = 'handle time is less than 30 seconds';
				}
				$scope.loadNextTicket();
				if(err) console.error(err + ': ' + JSON.stringify(data));
			}, function(){
				gNotify.alert('failed to update ticket');
			});
		};

		$scope.tickets = {
			$save: $scope.save
		};

		$scope.passTicket = function(){
			InboxModals.openPassTicketModal($scope.ticket._id).then(function afterPassingSucceeded(){
				$scope.loadNextTicket();
			});
		};

		$scope.snoozeTicket = function(ticket, willReturnAt, callback){
			InboxTicket.snooze({
				_id: ticket._id,
				willReturnAt: willReturnAt
			}, function(){
				callback();

				var ticketData = ticket.toJSON();
				var waitTime = moment.duration(moment() - moment((ticketData.snooze && ticketData.snooze.willReturnAt) ? ticketData.snooze.willReturnAt : ticketData.createdAt));
				var handleTime = moment.duration(moment() - moment(ticketData.assignedAt));
				var data = _.extend({
					snoozed: true,
					account: ticketData.accountName,
					listing: ticketData.listingTitle,
					guest: ticketData.guestName,
					completedBy: Authentication.getEmployee().username,
					completedAt: new Date(),
					waitTimeHours: waitTime.asHours().toFixed(1),
					waitTimeMinutes: waitTime.asMinutes().toFixed(1),
					passed: ticketData.passed ? ticketData.passed.length : 0,
					category: _.map(ticketData.actionsRequired, 'type'),
					handleTimeSeconds: handleTime.asSeconds().toFixed(1),
					handleTimeMinutes: handleTime.asMinutes().toFixed(1)
				}, ticketData);

				Events.emit('ticket.snoozed', data);

				$scope.ticket = null;
				getTicket();
			}, function(){
				gNotify.alert('Ticket could not be snoozed');
			});
		};

		$scope.updateActiveEmployees = function(){
			getAllActiveEmployees();
		};

		$scope.loadNextTicket = function(){
			if($stateParams.ticketId) return;

			$scope.ticket = null;
			getTicket();
		};


		$scope.$on('user:shift:updated', init);
	}
]);
