'use strict';

// Authentication service for employee variables
angular.module('employees').factory('Authentication', [
    '$http',
    '$q',
    '$window',
    'store',
    'jwtHelper',
    '$location',
    'AppConfig',
    'Events',
	function($http, $q, $window, store, jwtHelper, $location, AppConfig, Events) {

        var baseApi2Url = AppConfig.API_URL;

        var getToken = function(){
            return store.get('token');
        };

        var getTokenObject = function(){
            var token = getToken();
            if (!token) return null;

            try {
                return jwtHelper.decodeToken(token);
            } catch (err){
                return null;
            }
        };

        var getEmployee = function(){
            var employee = store.get('employee');
            if (employee && employee._id && employee._id !== _.get(getTokenObject(), 'userId')){
                store.remove('employee');
                employee = null;
            }
            return employee;
        };

        var goToLoginPage = function(){
            $location.path('login');
        };

		return {
			getEmployee: getEmployee,
			setEmployee: function(employee){
                store.set('employee', employee);
            },
            isAuthorized: function(roles) {
                var employee = this.getEmployee() || {roles:[]};
                return this.isAdmin() || _.intersection(employee.roles, roles).length;
            },
            isAdmin: function() {
                var employee = this.getEmployee() || {roles:[]};
                return employee.roles.indexOf('admin') !== -1;
            },

            goToLoginPage: goToLoginPage,
            getToken: getToken,
            getTokenObject: getTokenObject,
            isLoggedIn: function(){
                var token = getToken();
                try {
                    return !jwtHelper.isTokenExpired(token);
                } catch (err){
                    return false;
                }
            },
            userId: function(){
                var auth = getTokenObject();
                if (!auth) return false;
                return auth.userId;
            },
            login: function(username, password){
                return $q(function(resolve, reject){
                    $http.post(baseApi2Url + 'authenticate', {
                        apiKey: AppConfig.API_KEY,
                        username: username,
                        password: password
                    })
                        .success(function(response){
                            if (response && response.token){
                                store.set('token', response.token);

                                resolve(response.token);

                            } else {
                                reject('Server error');
                            }
                        })
                        .error(function(response){
                            reject(response.error ? response.error : response);
                        });
                });
            },
            logout: function(cb){
                //tell the server to revoke the token
                $http.post(baseApi2Url + 'authenticate/revoke').finally(function(){
                    //save for the event
                    var employee = getEmployee();

                    //remove token
                    store.remove('token');

                    //emit event
                    Events.emit('employee.loggedOut', employee);

                    //go to login
                    goToLoginPage();

                    if (cb) cb();
                });
            }

		};

	}
]);
