'use strict';

// Accounts controller
angular.module('accounts').controller('AccountController', [
    '$scope',
    '$state',
    '$location',
    '$uibModal',
    'Menus',
    'Authentication',
    'Accounts',
    'User',
    'dataFallback',
    'gNotify',
    'ConversationsModalsService',
    '$stateParams',
	'AppConfig',
	function($scope, $state, $location, $uibModal, Menus, Authentication, Accounts, User, dataFallback, gNotify, ConversationsModalsService, $stateParams, AppConfig) {

        function mergeCustomerChanges(account) {
            _.extend($scope.account, account);
        }

		$scope.now = new Date();

		// Expose state service
		$scope.$state = $state;

		// Get the account menu
		$scope.accountMenu = Menus.getMenu('account');

		// Expose authentication service
		$scope.authentication = Authentication;


        Accounts.get({
            accountId: $stateParams.accountId,
            fields: 'name active'
        }, function(account) {
            // Expose account object
            $scope.account = account;
        });

        User.get({accountId: $stateParams.accountId, roleId: '57447a900ebc04ba98064035', limit:1, fields:'_id fullName'}, function(response){
            if (response.results && response.results.length){
                $scope.accountUser = response.results[0];
            }
        });

        $scope.update = function(data) {
            if(data) {
                return Accounts.update({
                    accountId: $scope.account._id
                }, data, mergeCustomerChanges).$promise;
            }
            return $scope.account.$save(mergeCustomerChanges).$promise;
        };

        // open log modal
        $scope.openLogModal = function(category) {
            var account = $scope.account;
            $uibModal.open({
                size: 'lg',
                windowClass: 'log-modal',
                templateUrl: 'app/accounts/views/modals/log.client.view.html',
                controller: 'LogModalController',
                resolve: {
                    formData: function() {
                        return {
                            category: category,
                            account: account
                        };
                    }
                }
            });
        };

        $scope.openCustomerSupportModal = function(account){
            ConversationsModalsService.openCustomerSupportModal(account, $stateParams.userId);
        };

        $scope.openGuestyDashboard = function(user){
            //create a token
            User.generateToken({userId: user._id}, function(resp){
                // TODO: Replace w/ app.guesty.com when DNS propagation ends
                window.open(AppConfig.DASHBOARD_URL + '?token=' + resp.token);
                $scope.isLoading = false;

                //todo
                analytics.track('Logged in to My Guesty', {user: user.fullName, userId: user._id});
            }, function(err){
                console.error(err);
                $scope.isLoading = false;
                return notify({message:'Error while creating a token', classes: 'alert-danger'});
            });
        };
	}
]);
