'use strict';
// Accounts controller
angular.module('accounts').controller('AccountSettingsController', controller);

/** @ngInject **/
function controller($scope, $stateParams, SweetAlert, Accounts, notify, $uibModal, PlatformAnalytics, Enums, OwnersPortal){

	var self = this;

	$scope.plans = ['Commission', 'SaaS Monthly'];
	$scope.whiteLabelIntegrationDomains = ['user.guesty.com', 'superhostuser.com'];

	// Related to child view --> general.client.view.html
	$scope.managedByOpts = [
		'Company',
		'Individual',
		''
	];

	self.planCallBack = planCallBack;
	self.updateAccountManager = updateAccountManager;
	self.updateSalesPerson = updateSalesPerson;
	self.updateOnBoardingStatus = updateOnBoardingStatus;
	self.activateOwnersPortalWhiteLabelFeatures = activateOwnersPortalWhiteLabelFeatures;

	///////////////////

	self.init = function(){
		Accounts.getApi2({
			accountId: $stateParams.accountId,
			fields: '_id active mailingAddress createdAt activatedAt canceledAt canceledBy canceledReason' +
			' canceledDescription name timezone plan commission SaaS pricePlan pricePlanMinimum billing.billingDay' +
			' billing.nextBillingDate accountCategorization accountCategorizationIsManual onBoarding dontKickout whiteLabel internalData'
		}).$promise
		.then(function(account){
			$scope.account = account;
			if(_.get($scope.account, 'whiteLabel.integrationEmailDomains')){
				$scope.whiteLabelIntegrationDomains = $scope.whiteLabelIntegrationDomains.concat(_.map($scope.account.whiteLabel.integrationEmailDomains, 'domain'));
			}
		})

		OwnersPortal.get({accountId: $stateParams.accountId}).$promise
		.then(function(portal){
			if(!portal.whiteLabel){
				// setting some defaults
				portal = { whiteLabel: {} };
			}
			$scope.ownersPortal = portal;
		})
	};

	function planCallBack(planState){
		$scope.account.plan = planState;
	}

	function updateAccountManager(selected){
		_.set($scope.account, 'internalData.accountManager', selected);
	}

	function updateSalesPerson(selected){
		_.set($scope.account, 'internalData.salesPerson', selected);
	}

	function updateOnBoardingStatus(selected){
		_.set($scope.account, 'internalData.onboardingStatus', selected);
	}

	function activateOwnersPortalWhiteLabelFeatures(){
		if($scope.ownersPortal.whiteLabel.active){
			$scope.ownersPortal.whiteLabel.customDomain = true;
			$scope.ownersPortal.whiteLabel.poweredByGuesty = true;
		}
	}

	$scope.getAccountCategorization = function(){
		return new Array($scope.account.accountCategorization);
	};

	$scope.cancel = function(){
		SweetAlert.swal({
			title: 'Are You Sure?',
			text: 'Have you talked about it with Einav or Rebecka? Be certain! All reservations and hooks will be canceled.',
			type: 'warning',
			showCancelButton: true,
			confirmButtonColor: '#DD6B55',
			confirmButtonText: 'Delete account',
			cancelButtonText: 'Cancel',
			closeOnConfirm: true,
			closeOnCancel: true
		}, function(isConfirm){
			if(isConfirm){
				var verification = prompt('Please enter confirmation code');
				if(verification !== null){
					Accounts.cancel(verification, function(){
						SweetAlert.swal('The account was cancelled and is not managed any more.');
					}, function(){
						SweetAlert.swal('Could not Cancel account At the moment, please contact Koby.');
					});
				}
			}
		});
	};

	// Save account
	self.save = function(form, callback){
		if(!$scope.account) return notify({ message: 'Bad request', classes: 'alert-danger' });
		if(form && !form.$valid) return notify({ message: 'Invalid form', classes: 'alert-danger' });
		var promises = [];
		var updateAccount = $scope.account.$updateApi2().$promise;
		promises.push(updateAccount);

		if(self.ownersPortalWhiteLabelHasChanged){
			var action = 'save';
			if($scope.ownersPortal._id){
				action = 'update';
			}
			$scope.ownersPortal.accountId = $scope.ownersPortal.accountId || $stateParams.accountId;
			var saveOP = OwnersPortal[action]($scope.ownersPortal).$promise;
			promises.push(saveOP);
		}

		Promise.all(promises)
		.then(function(results){
			var ownersPortal = results[1];
			$scope.ownersPortal = ownersPortal;
			notify({ message: 'Saved!', classes: 'alert-success' });
			if(form) form.$setPristine();
		})
		.catch(function(err){
			var extraMessage = err.data ? err.data.message : '';
			notify({
				message: 'Saving failed: ' + err.status + ': ' + err.statusText + ': ' + extraMessage,
				classes: 'alert-danger'
			});
		})
	};

	$scope.toggleIsManaged = function(){
		if($scope.account.active){
			$uibModal.open({
				windowClass: 'deactivate-modal',
				templateUrl: 'app/accounts/views/modals/deactivate.modal.client.view.html',
				controller: 'DeactivateController',
				resolve: {
					formData: function(){
						return {
							account: $scope.account
						};
					}
				}
			}).result.then(function(data){
				// check is active was changed
				if($scope.account.active) return false;
				//todo: Analytics.track('Customer - Deactivated', _.extend({}, data, $scope.account));

			});
		}else{
			Accounts.activate({
				_id: $scope.account._id
			}, function(){
				//todo: Analytics.track('Customer - Activated', $scope.account);
			});
			$scope.account.active = true;
		}
	};

	$scope.setAccountCategory = function(category){
		$scope.account.accountCategorization = category;
		self.save();

		//report to user analytics
		PlatformAnalytics.identify({ userId: $scope.account._id, traits: { accountCategorization: category } });
		PlatformAnalytics.track({
			userId: $scope.account._id,
			event: 'Changed category',
			properties: { accountCategorization: category }
		});
	};
}
