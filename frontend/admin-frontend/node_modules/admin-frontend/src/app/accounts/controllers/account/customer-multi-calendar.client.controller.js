'use strict';

// Listings controller
angular.module('accounts').controller('CustomerMultiCalendarController', [
    '$stateParams',
    'Listing',
    'ListingCalendar',
    '$uibModal',
    '$filter',
    '$compile',
    '$scope',
    function($stateParams, Listing, ListingCalendar, $uibModal, $filter, $compile, $scope) {

        var self = this;
        var today = moment().startOf('day');

        self.listingsLimit = 15;
        var defaultSortOption = {
            title: 'Title',
            value: 'title'
        };
        self.sortBy = defaultSortOption;
        self.sortOptions = [
            defaultSortOption,
            {
                title: 'Address',
                value: 'address.full'
            },
            {
                title: 'Nickname',
                value: 'nickname'
            }
        ];

        function getBackgroundEventsForUiCalendar(event) {
            var start = moment(event.start || event.date, 'YYYY-MM-DD');
            var cssClasses = [];
            if (event.status==='booked'){
                cssClasses.push('reservation', 'confirmed');
            } else if (event.status==='reserved'){
                cssClasses.push('reservation', 'reserved');
            } else {
                cssClasses.push(event.status + '-day');
            }
            if (start.isBefore(today)) cssClasses.push('in-past');
            var obj = {
                start: start,
                end: event.end ? moment(event.end, 'YYYY-MM-DD').add(1, 'day') : start,
                className: cssClasses,
                allDay: true,
                listingId: event.listingId,
                event: event
            };
            if (event.reservationId) {
                obj.url = '/reservations/' + event.reservationId;
            } else if (event.status === 'available'){
                obj.title = $filter('currencySign')(event.price, event.currency, 0);
            } else if (event.status === 'unavailable'){
                obj.title = event.note;
            }
            return obj;
        }

        function loadDates(start, end, timezone, renderCalendar){
            start = moment(start).format('YYYY-MM-DD');
            end = moment(end).format('YYYY-MM-DD');

            ListingCalendar.retrieveMulti({
                ids: _.map(self.listingsRequest.results, '_id'),
                from: start,
                to: end,
                fields: 'listingId date status price currency note reservationId -_id'
            }, function(dates) {
                //combine events
                //first sort by listing, so we can go day by day and merge events
                dates = _.sortBy(dates, 'listingId');

                //add another element, so the last element will also count
                dates.push({});

                //go day by day,
                var events = [],
                    prevEvent = dates.shift() || {};

                _.each(dates, function(date){
                    //is it the an extension of the prev event
                    if (date.listingId === prevEvent.listingId && ((date.reservationId && date.reservationId === prevEvent.reservationId) || (date.status === 'unavailable' && prevEvent.status === 'unavailable' && date.note === prevEvent.note))){
                        //extend the end of the prevDate
                        prevEvent.end = date.date;
                    } else {
                        events.push(prevEvent);
                        prevEvent = date;
                    }
                });
                //map and cb
                renderCalendar(_.map(events, getBackgroundEventsForUiCalendar));
            }, function () {
                renderCalendar();
            });
        }

        self.loadListings = function(){

            var q = {
                accountId: $stateParams.accountId || $scope.accountId,
                active:true,
                pmsActive: true,
                fields: '_id title nickname',
                sort: self.sortBy.value,
                limit: self.listingsLimit,
                skip: (self.listingPage-1) * self.listingsLimit
            };

            if (self.filteredTag){
                q.tags = self.filteredTag;
            }
            if (self.filteredCity){
                q.city = self.filteredCity;
            }
            if (self.filteredListed !== null){
                q.listed = self.filteredListed;
            }
            if (self.filteredAvailability){
                q.available = {
                    checkIn: moment(self.filteredAvailability.checkIn).format('YYYY-MM-DD'),
                    checkOut: moment(self.filteredAvailability.checkOut).format('YYYY-MM-DD'),
                    minOccupancy: self.filteredAvailability.minOccupancy
                }
            }


            return self.listingsRequest = Listing.query(q, function(listings){
                _.each(listings.results, function(listing){
                    listing.id = listing._id;
                    if (!listing.title) listing.title = 'Untitled';
                });
            });
        };

        function editEvent(calendarEvent, jsEvent, fullCalendarView){
            //editing is not permitted on past events
            if (moment(calendarEvent.end || calendarEvent.start).isBefore(new Date())){
                return;
            }

            //editing is not permitted on reservation events
            if (calendarEvent.event && calendarEvent.event.reservationId) {
                return;
            }

            //open the edit modal
            $uibModal.open({
                templateUrl: 'app/listings/views/modals/calendar.edit.html',
                controller: 'ListingCalendarEditCtrl as edit',
                size: 'md',
                resolve: {
                    event: function(){
                        return calendarEvent.event;
                    },
                    listingIds: function(){
                        return calendarEvent.listingId;
                    }
                }
            }).result.then(function(result){
                if (result && result.status === 'success'){
                    fullCalendarView.calendar.refetchEvents();
                }
            });
        }

        self.refetch = function(){
            self.loadListings().$promise.then(function(){
                self.fullCalendar.refetchResources();
                self.fullCalendar.refetchEvents();
            });
        };

        self.changeSorting = function(option){
            self.sortBy = option;
            self.refetch();
        };

        self.filterByTag = function(tag){
            self.filteredTag = tag;
            self.refetch();
        };

        self.filterByCity = function(city){
            self.filteredCity = city;
            self.refetch();
        };

        self.filterByListed = function(state){
            self.filteredListed = state;
            self.refetch();
        };

        self.findAvailability = function(){
            $uibModal.open({
                templateUrl: 'app/listings/views/listing/find-availability.html',
                controller: 'FindAvailabilityCtrl as ctrl',
                size: 'md',
                resolve: {
                    initialValues: function(){
                        return self.filteredAvailability;
                    }
                }
            }).result.then(function(result){
                self.filteredAvailability = result;
                self.refetch();
            });
        };

        self.init = function(){
            self.listingsLimit = 15; //_.get(SystemConfiguration, 'multicalendar.listingsLimit', 15);
            self.listingPage = 1;
            self.filteredTag = null;
            self.filteredCity = null;
            self.filteredListed = true;

            self.loadListings().$promise.then(function(){
                self.calendarConfig = {
                    viewRender: function(view, element){
                        self.fullCalendar = view.calendar;
                        element.find('.fc-head .fc-time-area th.fc-widget-header[data-date="' + today.format('YYYY-MM-DD') + '"]').addClass('fc-today');
                        element.find('.fc-head .fc-time-area th.fc-widget-header .fc-cell-text').each(function(i, col){
                            var content = $(col).text().trim().split(',');
                            $(col).html('<span class="day-name">' + content[0] + '</span><span class="day-num">' + content[1] + '</span>');
                        });
                    },
                    schedulerLicenseKey: '0242383282-fcs-1456162589',
                    defaultView: 'timeline30Day',
                    views: {
                        timeline30Day: {
                            type: 'timeline',
                            duration: { days: 30 },
                            slotDuration: { days: 1},
                            buttonText: '30 Days'
                        }
                    },
                    defaultDate: moment().subtract(1, 'day'),
                    height: window.innerHeight - 200,
                    editable: false,
                    header:{
                        left: 'title',
                        center: '',
                        right: 'timelineMonth,timeline30Day today prev,next'
                    },
                    slotWidth: 75,
                    slotLabelFormat: 'dd,DD',
                    eventOverlap: false,
                    resourceAreaWidth: '300px',
                    resourceLabelText: 'Listings',
                    resourceRender: function(resource, el){
                        var link = $('<a></a>').attr('href', '/listings/' + resource.id + '/calendar').text(resource.title);
                        if (resource.nickname){
                            var nickname = $('<span></span>').addClass('label label-info').text(resource.nickname);
                            link.prepend(nickname);
                        }
                        $(el).find('.fc-cell-text').html(link);
                    },
                    resources: function(cb){
                        cb(self.listingsRequest.results);
                    },
                    eventResourceField: 'listingId',
                    eventRender: function(event, element, view){
                        if (event.event && event.event.reservationId){
                            element.attr({
                                'reservation-popup': event.event.reservationId
                            });
                            $compile(element)($scope);
                        }
                    },
                    eventClick: editEvent
                };

                self.calendarData = [loadDates];

                self.filterCityOptions = Listing.cities({accountId: $stateParams.accountId || $scope.accountId});
                self.filterTagOptions = Listing.tags({accountId: $stateParams.accountId || $scope.accountId});

            });

        };



    }
]);
