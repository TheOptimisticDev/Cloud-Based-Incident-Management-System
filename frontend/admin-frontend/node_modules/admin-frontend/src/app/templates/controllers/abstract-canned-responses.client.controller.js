'use strict';

// Canned Responses controller
angular.module('templates').controller('AbstractCannedResponsesController', [
    '$scope',
    'CannedResponses',
    'gNotify',
    function($scope, CannedResponses, gNotify) {

        // finds abstract canned responses that already imported to relevant category
        function findAlreadyImportedCannedResponses () {
            if(!$scope.cannedResponses || $scope.isGlobalCannedResponses) return;

            _.each($scope.abstracts, function(subgroups, group) {
                _.each(subgroups, function(templates, subgroup){
                    _.each(templates, function(template) {
                        if(_.find($scope.cannedResponses[group][subgroup], {'prototypeId': template._id})) {
                            template.hasAlreadyImported = true;
                        }
                    });
                });
            });
        }

        function getAbstractsIdsToImport () {
            var abstractsIds = [];
            _.each($scope.abstracts, function(subgroups) {
                _.each(subgroups, function(templates){
                    _.each(templates, function(template) {
                        if(template.isSelectedToImport) abstractsIds.push(template._id);
                    });
                });
            });
            return abstractsIds;
        }

		// Find a list of Abstract Canned Responses
		$scope.find = function() {
            CannedResponses.queryGroupedByWith({isAbstract: true}, function(allAbstracts) {
                $scope.abstracts = _.mapValues(allAbstracts, function(templates){
                    //group by status of reservation
                    var results = _.groupBy(templates, function(template){
                        return template.applyWhenNoBooking && template.applyWhenHasBooking ? 'always' : template.applyWhenHasBooking ? 'with confirmed reservation' : template.applyWhenNoBooking ? 'without confirmed reservation' : 'Error';
                    });

                    //group by folders (in each group)
                    results = _.mapValues(results, function(templatesGroupedByStatus){
                        var canned = [];
                        _.each(templatesGroupedByStatus, function(template){
                            if (!template.folder) return canned.push(template);

                            var group = _.find(canned, function(item){
                                return item.folder === template.folder;
                            });
                            if (group){
                                group.items.push(template);
                            } else {
                                canned.push({
                                    folder: template.folder,
                                    items : [template],
                                    type: template.type
                                });
                            }
                        });
                        return canned;
                    });
                    return results;
                });
                findAlreadyImportedCannedResponses();
            });
		};

        $scope.$on('cannedResponse:updated', $scope.find);

        $scope.toggleAbstractToImport = function(cannedResponse) {
            cannedResponse.isSelectedToImport = !cannedResponse.isSelectedToImport;
        };

        $scope.clickOnAbstractCannedResponse = function (cannedResponse) {
            if($scope.isGlobalCannedResponses) {
                $scope.openCannedResponseModal(cannedResponse._id);
            } else {
                $scope.toggleAbstractToImport(cannedResponse);
            }
        };

        $scope.importAbstractCannedResponses = function() {
            var abstractsIds = getAbstractsIdsToImport();
            if(!abstractsIds.length) {
                return gNotify.warning('Please select canned response(s) to import');
            }
            CannedResponses.import(_.extend({abstractsIds: abstractsIds}, $scope.importParams), function() {
                gNotify.success('Imported canned responses successfully');
                $scope.toggleImportCannedResponses();
            });
        };
	}
]);
