'use strict';

// Canned Responses controller
angular.module('templates').controller('CannedResponseController', [
    '$scope',
    '$stateParams',
    'CannedResponses',
    'CommonService',
    'gNotify',
    'dataFallback',
    'Listing',
	function($scope, $stateParams, CannedResponses, CommonService, gNotify, dataFallback, Listing) {

        var self = this;
        self.selectedListings = [];

		function getCannedResponseProps() {
            return _.extend({
                question: '',
                answer: '',
                type: 'guest',
                applyWhenNoBooking: true,
                applyWhenHasBooking: true,
                language: 'en'
            }, queryParams());
        }

        function queryParams(){
            var obj = {};

            if ($scope.listing) {
                obj.listingsIds = [$scope.listing._id];
                obj.accountId = $scope.listing.accountId;
            } else if($scope.account) {
                obj.accountId = $scope.account._id;
            } else if ($scope.queryParams) {
                obj = $scope.queryParams;
                if ($scope.queryParams.listingId){
                    obj.listingsIds = [$scope.queryParams.listingId];
                }
            }

            return obj;
        }

        function closeModal(cannedResponse) {
            if($scope.cannedResponseModal)
                $scope.cannedResponseModal.close(cannedResponse);
        }

        $scope.optionalLanguages = ['en', 'fr', 'sp', 'it', 'ru', 'ja', 'zh'];

		// Remove existing Canned Response
		$scope.remove = function(cannedResponse) {
            cannedResponse.$remove(function() {
                gNotify.success('Canned Response removed successfully');
                closeModal(cannedResponse);
            }, function() {
                gNotify.alert('Canned Response removing failed');
            });
            // remove the removed canned responses from responses array
            for (var i in $scope.cannedResponses ) {
                if ($scope.cannedResponses[i] === cannedResponse) {
                    $scope.cannedResponses.splice(i, 1);
                }
            }
		};

		// Update existing Canned Response
		$scope.save = function(cannedResponse) {
            cannedResponse.listingsIds = _.map(self.selectedListings, '_id');
            var method = cannedResponse._id ? '$update' : '$save';
			cannedResponse[method](function() {
                gNotify.success('Canned Response saved successfully');
                closeModal(cannedResponse);
            }, function() {
                gNotify.alert('Canned Response saved failed');
			});
		};

        $scope.loadListings = function(q, ids){
            return Listing.query({
                accountId: self.accountId,
                fields:'_id title address.full picture.thumbnail nickname',
                q: q,
                ids: ids,
                limit: ids ? 100 : 10
            }, function(listings){
                $scope.listings = listings.results;
            });
        };

        function getListingsAndSetSelectedListings(listingIds) {
            self.selectedListings = [];
            $scope.loadListings(null, listingIds).$promise.then(function(){
                if (listingIds){
                    _.each(listingIds, function(id){
                        var listing = _.find($scope.listings, {'_id': id});
                        if (listing){
                            self.selectedListings.push(listing);
                        }
                    });
                }
            });
        }

		// Find existing Canned Response
		$scope.init = function() {
            dataFallback($scope, 'cannedResponse', function(cannedResponseId, cannedResponse){
                $scope.editType = 'Edit';
                if (cannedResponse){
                    $scope.cannedResponse = cannedResponse;
                    self.accountId = cannedResponse.accountId;
                    getListingsAndSetSelectedListings(cannedResponse.listingsIds);
                } else if(cannedResponseId) {
                    $scope.cannedResponse = CannedResponses.get({
                        cannedResponseId: cannedResponseId
                    }, function(cannedResponse){
                        self.accountId = cannedResponse.accountId;
                        getListingsAndSetSelectedListings(cannedResponse.listingsIds);
                    });
                } else {
                    $scope.editType = 'Create';
                    $scope.cannedResponse = new CannedResponses(getCannedResponseProps());
                    self.accountId = $scope.cannedResponse.accountId;
                    getListingsAndSetSelectedListings($scope.cannedResponse.listingsIds);
                }
            });
		};
	}
]);
