'use strict';

// Templates controller
angular.module('templates').controller('TemplatesController', [
    '$scope',
    '$stateParams',
    '$location',
    '$timeout',
    'Authentication',
    'Templates',
    'CommonService',
    'Filepicker',
    'notify',
	function($scope, $stateParams, $location, $timeout, Authentication, Templates, CommonService, Filepicker, notify) {
		$scope.authentication = Authentication;

		$scope.template = {
            type: 'plain'
        };
        $scope.addTemplateMode = false;

        // TODO: when using this controller from the user screen - should load the user files for attachments (view already prepared for it)
        $scope.accountFiles = [];

        function queryParams(){
            var obj = {};

            if ($scope.account) {
                obj.accountId = $scope.account._id;
            }

            if ($scope.listing) {
                obj.listingId = $scope.listing._id;
                if(!obj.accountId) obj.accountId = $scope.listing.accountId;
            }

            return obj;
        }

		// Create new Template
		$scope.create = function() {
			var template = new Templates($scope.template);
			template.$save(queryParams(), function() {
                notify({message: 'Template saved successfully', classes: 'alert-success'});
				$scope.find();
                $scope.template = {
                    type: 'plain'
                };
                $scope.addTemplateMode = false;
			}, function(errorResponse) {
                notify({message: 'Template save failed', classes: 'alert-danger'});
				$scope.error = errorResponse.data.message;
			});
		};

		// Remove existing Template
		$scope.remove = function( template ) {

            if(template.isLocked) return notify({
                message: 'Locked Template cannot be removed',
                classes: 'alert-info'
            });

            Templates.usage({
                templateId: template._id
            },function(data){
                var text;

                if (data.hooks || data.reservations) {
                    text = 'This template is being used by ' + data.hooks + ' hooks and ' + data.reservations + ' reservations. If you choose to continue all these hooks will be deleted.';
                }

                CommonService.confirm(null, text).then(function() {
                    template.$remove(function() {
                        notify({
                            message: 'Template removed successfully',
                            classes: 'alert-success'
                        });
                        $scope.find();
                    }, function() {
                        notify({
                            message: 'Failed to remove template',
                            classes: 'alert-danger'
                        });
                    });
                });
            });
		};

		// Update existing Template
		$scope.update = function(template) {
			template.$update({}, function() {
				$scope.find();
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Templates
		$scope.find = function() {
            $scope.templates = Templates.query(queryParams());
		};

		// Find existing Template
		$scope.findOne = function() {
			$scope.template = Templates.get({
				templateId: $stateParams.templateId
			});
		};

		/**
         * change the template mode
         */
        $scope.changeTemplateType = function(template, type) {
            if(type === 'email') {
                template.type = 'email';
                template.body = template.body.replace(/\n/g, '<br>'); // replacing new lines to <br> tags
            } else {
                template.type = 'plain';
                // use timeout because the html pulled out from the ck-editor after a digest.
                $timeout(function() {
                    template.body = CommonService.getTextFromHTML('<div>' + template.body + '</div>');
                });
            }
        };

        /**
         * add the file to a template's attachments array
         * @param template
         * @param file
         */
        $scope.attachFileToTemplate = function(template, file) {
            template.attachments.push(file);
        };

         /**
         * open the filepicker modal and save the uploaded file data into the attachments array
         * @param template {{}}
         */
        $scope.uploadAndAttachFile = function(template) {
            Filepicker.pickAndStore({multiple: true, maxSize: 10485760}, {}, function (InkBlobs) {
                $scope.attachFileToTemplate(template, InkBlobs[0]);
                // the file-picker callback is out-of-scope, so it needed a digest action to update the view
                $scope.$digest();
            });
        };

        /**
         * remove an attachment object from attachments array (but not yet saving)
         * @param template
         * @param attachment
         */
        $scope.removeAttachedFile = function(template, attachment) {
            template.attachments = _.filter(template.attachments, function(obj) {
                return obj !== attachment;
            });
        };


        $scope.btnAddTemplateMode = function() {
            $scope.addTemplateMode = true;
        };
	}
]);
