'use strict';

angular.module('conversations').controller('ConversationsSearchController', [
    '$scope',
    'Accounts',
    'User',
    'Guest',
    'Contact',
    'Conversations',
    'Reservations',
    '$state',
    '$stateParams',
    'notify',
    '$uibModal',
    function ($scope, Accounts, User, Guest, Contact, Conversations, Reservations, $state, $stateParams, notify, $uibModal) {

        var fields = '_id conversationWith subject accountId guestId contact lastUpdatedAt thread.reservationId';

        // Conversations search controller logic

        /**
         * Initialize conversation-with parameters
         */
        function initConversationWithParameters() {
            if ($stateParams.conversationWith) {
                $scope.query.conversationWith = $stateParams.conversationWith;
            }
        }

        /**
         * Initialize guest parameters
         */
        function initGuestParameters() {
            if ($stateParams.guest) {
                $scope.query.guest = $stateParams.guest;
            }
        }

        /**
         * Initialize contact parameters
         */
        function initUserParameters() {
            if ($stateParams.userId) {
                $scope.query.userId = $stateParams.userId;
                $scope.selectUser();
            }
        }

        function initContactParameters() {
            if ($stateParams.contactId) {
                $scope.query.contactId = $stateParams.contactId;
                $scope.selectContact();
            }
        }


        /**
         * Initialize free text query parameter
         */
        function initFreeTextParameters() {
            if ($stateParams.freeText) {
                $scope.query.freeText = $stateParams.freeText;
            }
        }

        // public

        // default pagination state
        $scope.currentPage = 1;
        $scope.totalCount = 0;

        // query for conversations-search
        $scope.query = {
            fields: fields,
            conversationWith: 'User',
            accountId: $stateParams.accountId,
            userId: null,
            contactId: null,
            guest: null,
            freeText: null
        };

        // the controller's initialization method
        $scope.init = function() {

            User.query({accountId: $stateParams.accountId, fields: 'fullName'}, function(response){
                $scope.users = response.results;

                // Get account state parameter from URL
                initUserParameters();
            });

            Contact.query({accountId: $stateParams.accountId, fields: 'fullName'}, function(response){
                $scope.contacts = response.results;

                // Get contact state parameter from URL
                initContactParameters();
            });

            initConversationWithParameters();

            // Get guest state parameter from URL
            initGuestParameters();

            // Get Free Text query parameter from URL
            initFreeTextParameters();

            // Find reservations
            $scope.find();
        };

        /**
         * change the conversation-with property
         * @param conversationWith
         */
        $scope.changeConversationWith = function (conversationWith) {
            $scope.query.conversationWith = conversationWith;
            $scope.find();
        };

        $scope.selectUser = function () {
            $scope.user = _.find($scope.users, function(user) {
                return user._id === $scope.query.userId;
            });
        };

        $scope.findGuests = function (searchTerm) {
            return Guest.query({
                q: searchTerm,
                fields: '_id fullName',
                accountId: $stateParams.accountId
            }).$promise.then(function(response){
                return response.results;
            });
        };

        /**
         * Find a list of Conversations
         */
        $scope.find = function () {

            var query = _.clone($scope.query);

            if (query.guest){
                query.guestId = query.guest._id;
                delete query.guest;
            }

            // Set pagination
            query.skip = ($scope.currentPage - 1) * 50;

            // Get all reservations matching the current query
            $scope.conversationsQuery = Conversations.query(query, function (response) {
                $scope.conversations = response.conversations;
                $scope.totalCount = response.totalCount;
            });
        };

        $scope.selectContact = function() {
            $scope.contact = _.find($scope.contacts, function(contact) {
                return contact._id === $scope.query.contactId;
            });
        };

        var getReservationIds = function(conversation, cb){
            var ids = _.filter( _.map(conversation.thread, 'reservationId'));
            if (!conversation.guestId) {
                return cb(ids);
            }

            Reservations.ofGuest({accountId: conversation.accountId, guestId: conversation.guestId}, function(reservations){
                cb(ids.concat(reservations));
            }, function(){
                cb(ids);
            });
        };

        $scope.openConversation = function(conversation){
            getReservationIds(conversation, function(reservationIds){
                $uibModal.open({
                    windowClass: 'modal-ticket',
                    templateUrl: 'app/dashboard/views/tickets/dashboard-ticket.client.view.html',
                    controller: function($scope) {
                        $scope.ticket = {
                            $resolved: true,    //to make all the listeners run
                            actionsRequired : [
                                {
                                    type : 'conversation',
                                    id : conversation._id
                                }
                            ],
                            accountId : conversation.accountId,
                            reservationIds : reservationIds
                        };
                    }
                });
            });

        };
    }
]);
