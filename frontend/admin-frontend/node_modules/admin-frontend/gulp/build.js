'use strict';

var path = require('path');
var gulp = require('gulp');
var runSequence = require('run-sequence');
var conf = require('./conf');

var $ = require('gulp-load-plugins')({
    pattern: ['gulp-*', 'main-bower-files', 'uglify-save-license', 'del']
});

/** Run this to go through all the html files, minify them, then cache them upfront for angular, and spit it out as a single js file */
gulp.task('partials', function () {
    //get the htmls
    return gulp.src([
        path.join(conf.paths.src, '/app/**/*.html'),
        path.join(conf.paths.tmp, '/serve/app/**/*.html')
    ])
        //minify
        .pipe($.minifyHtml({
            empty: true,
            spare: true,
            quotes: true,
            loose: true
        }))
        //prepare a cache version for angular
        .pipe($.angularTemplatecache('templateCacheHtml.js', {
            module: 'guestyAdmin',
            root: 'app'
        }))
        //spit out as a single js file
        .pipe(gulp.dest(conf.paths.tmp + '/partials/'));
});

/** Run this to prepare the html for build */
gulp.task('html', ['inject', 'partials'], function () {
    //it relies on injection of all the js files, and the partials

    var partialsInjectFile = gulp.src(path.join(conf.paths.tmp, '/partials/templateCacheHtml.js'), { read: false });
    var partialsInjectOptions = {
        starttag: '<!-- inject:partials -->',
        ignorePath: path.join(conf.paths.tmp, '/partials'),
        addRootSlash: false
    };

    var htmlFilter = $.filter('*.html', { restore: true });
    var jsFilter = $.filter(['**/*.js', '!_g/*.js'], { restore: true });
    var cssFilter = $.filter('**/*.css', { restore: true });
    var assets;

    //get the html
    return gulp.src(path.join(conf.paths.tmp, '/serve/*.html'))
        //inject the partials
        .pipe($.inject(partialsInjectFile, partialsInjectOptions))
        //inject bower files
        .pipe(assets = $.useref.assets({
            transformPath: function(filePath) {
                return filePath.replace('/bower_components/','../bower_components/');
            }
        }))
        .pipe($.rev())

        //handle the javascript files
        .pipe(jsFilter)
        //prepare source maps
        //.pipe($.sourcemaps.init())
        //add angular dependencies
        .pipe($.ngAnnotate())
        //minify
        .pipe($.uglify({ preserveComments: $.uglifySaveLicense })).on('error', conf.errorHandler('Uglify'))
        //spit out source maps
        //.pipe($.sourcemaps.write('maps'))
        .pipe(jsFilter.restore)

        //lets handle the styles now:
        .pipe(cssFilter)
        //prepare source maps
        //.pipe($.sourcemaps.init())
        //fix issue with bootstrap and fontawasome
        .pipe($.replace('../../bower_components/bootstrap-sass/assets/fonts/bootstrap/', '../fonts/'))
        .pipe($.replace('../../bower_components/font-awesome/fonts', '../fonts'))
        //minify
        .pipe($.minifyCss({ processImport: false }))
        //spit out source maps
        //.pipe($.sourcemaps.write('maps'))
        .pipe(cssFilter.restore)

        //now assets
        .pipe(assets.restore())
        .pipe($.useref())
        .pipe($.revReplace())

        //now html
        .pipe(htmlFilter)
        .pipe($.minifyHtml({
            empty: true,
            spare: true,
            quotes: true,
            conditionals: true,
            loose: true
        }))
        .pipe(htmlFilter.restore)
        .pipe(gulp.dest(path.join(conf.paths.dist, '/')))
        .pipe($.size({ title: path.join(conf.paths.dist, '/'), showFiles: true }));
});

// Only applies for fonts from bower dependencies
// Custom fonts are handled by the "other" task
gulp.task('fonts', function () {
    //get all the fonts from the npm packages
    return gulp.src($.mainBowerFiles())
        .pipe($.filter('**/*.{eot,svg,ttf,woff,woff2}'))
        //put them on a single folder
        .pipe($.flatten())
        //copy to public assets folder
        .pipe(gulp.dest(path.join(conf.paths.dist, '/fonts/')));
});

//move all files that are not html, css, js and env vars
gulp.task('other', function () {
    var fileFilter = $.filter(function (file) {
        return file.stat.isFile();
    });

    return gulp.src([
        path.join(conf.paths.src, '/**/*'),
        path.join('!' + conf.paths.src, '/**/*.{html,css,js,scss}'),
        path.join('!' + conf.paths.src, '/_g/*')
    ])
        .pipe(fileFilter)
        .pipe(gulp.dest(path.join(conf.paths.dist, '/')));
});

//helper function to create a flow of copying environment variables files of the given environment
var envVarsTask = function(env){
	var actualVersion = require('./../package.json').version;

	// Dump version to screen
	console.log('~~~~~~~~~~~~~~~~~~~~~~~');
	console.log('Version is ', actualVersion);
	console.log('~~~~~~~~~~~~~~~~~~~~~~~');

	// Actual piping
    return gulp.src(path.join(conf.paths.src, '/_g/{' + env + ',all}.js'))
        .pipe($.concat('config.js'))
        .pipe(gulp.dest(path.join(conf.paths.dist, '/_g')));
};

/** Run this to copy the file of environment variables of the development */
gulp.task('env-vars:localhost', function(){
    return envVarsTask('dev');
});
/** Run this to copy the file of environment variables of the production */
gulp.task('env-vars:production', function(){
    return envVarsTask(process.env.NODE_ENV || 'production');
});

/** Run this to empty the folders of the build */
gulp.task('clean', function () {
    //basically remove everying under dist & .tmp folders
    return $.del([path.join(conf.paths.dist, '/'), path.join(conf.paths.tmp, '/')]);
});

/** Run this to rebuild */
gulp.task('build', function(cb){
    //first clean the dist folder
    //then run html file
    //then move fonts
    //and all other files
    runSequence('clean', ['html', 'fonts', 'other'], cb);
});

/** Run this to deploy to the production server what's already on the dist folder */
gulp.task('firebase:deploy', function(){
    var spawn = require('child_process').spawn;
    var log = function(data){
        console.log("[Firebase] " + data.toString().trim());
    };

	var params = ['deploy'];
	if(process.env.FIREBASE_TOKEN){
		params.push('--token');
		params.push(process.env.FIREBASE_TOKEN );
	}

	var task = spawn('firebase', params);

	task.on('error', function(error){
		throw error;
	});
    task.stdout.on('data', log);
    task.stderr.on('data', log);
});

/** Run this to rebuild and deploy to the production server */
gulp.task('deploy', function(cb){
    //we build a ready to be shipped code
    //then we copy environment variables for production
    //then we deploy to firebase
    runSequence('build', 'env-vars:production', 'firebase:deploy', cb);
});